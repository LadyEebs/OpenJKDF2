// lighting functionality

#include "defines.gli"
#include "uniforms.gli"
#include "math.gli"
#include "clustering.gli"
#include "sg.gli"
#include "textures.gli"
#include "attr.gli"

#ifndef LIGHTING_H
#define LIGHTING_H

// the long streaky lobe of GGX/blinn-phong is just way nicer than phong...
//#define GGX

struct light_result
{
	// r11g11b10f accumulators
	uint diffuse;
	uint specular;
};

struct light_input
{
#ifndef FRAG_ATTR_FETCH
	uvec2 pos;		 // 16:16:16 view space pos
	uint  normal;	 // 16:16 octahedral normal
	uint  view;		 // 16:16 octahedral view vector (ggx)
	uint  reflected; // 16:16 octahedral reflection vector (phong)
#endif
	uint  spec_c;    // 16:16 specular coeffs
	uint  tint;      // tint rgba
};

uint calc_spec_c(float a)
{
#ifdef GGX	
	vec2 coeffs = vec2(a * a, a * a - 1.0);// a * float(4.0) + float(2.0));
#else
	// phong
	float rcp_a2 = 1.0 / (a * a);
	vec2 coeffs = vec2(rcp_a2 / 3.141592, 0.72134752 * rcp_a2 + 0.39674113);
#endif
	return packHalf2x16(coeffs);
}

// https://www.unrealengine.com/en-US/blog/physically-based-shading-on-mobile
vec3 env_brdf_approx( vec3 f0, float roughness, float ndotv )
{
	const vec4 c0 = vec4( -1, -0.0275, -0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, -0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( -9.28 * ndotv ) ) * r.x + r.y;
	vec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;
	return f0 * AB.x + AB.y;
}

float env_brdf_nonmetal( float roughness, float ndotv )
{
	// Same as env_brdf_approx( 0.04, roughness, ndotv )
	const vec2 c0 = vec2( -1, -0.0275 );
	const vec2 c1 = vec2( 1, 0.0425 );
	vec2 r = roughness * c0 + c1;
	return min( r.x * r.x, exp2( -9.28 * ndotv ) ) * r.x + r.y;
}

// https://community.arm.com/cfs-file/__key/communityserver-blogs-components-weblogfiles/00-00-00-20-66/siggraph2015_2D00_mmg_2D00_renaldas_2D00_slides.pdf
vec3 env_brdf_refit(vec3 f0, float roughness, float ndotv)
{
	float r = 1.0 - max(roughness, ndotv);
	float r2 = r * r;
	return r * r2 + f0;
}

vec3 env_brdf( vec3 f0, float roughness, float ndotv )
{
	return env_brdf_refit(f0, roughness, ndotv);
}

vec3 fresnel_approx(vec3 f0, float costh)
{
	return f0 + (1.0 - f0) * exp2(-8.35 * costh);
}

void calc_point_light(inout light_result result, uint light_index, light_input params)
{
#ifdef FRAG_ATTR_FETCH
	vec3 viewPos = fetch_vtx_pos();
#else
	vec3 viewPos = unpackHalf4x16(params.pos).xyz;
#endif
	vec3 lvec = lights[light_index].position.xyz - viewPos.xyz;
	
	float dotVector = dot(lvec, lvec);
	if (dotVector >= lights[light_index].radiusSqr)
		return;

	float rcpLen = fastRcpSqrtNR1(dotVector);
	float len    = rcpLen * dotVector;
	lvec         = lvec * rcpLen;

	float intensity = lights[light_index].direction_intensity.w;
	//if(lights[light_index].type == 3)
	//{
	//	float angle = dot(lights[light_index].direction_intensity.xyz, lvec);
	//	if (angle <= lights[light_index].cosAngleY)
	//		continue;
	//
	//	if (angle < lights[light_index].cosAngleX)
    //        intensity = (1.0 - (lights[light_index].cosAngleX - angle) * lights[light_index].lux.x) * intensity;
	//}

	// this is JK's dynamic light attenuation model
	// note it depends on scalar value matching whatever was used to calculate the intensity, it seems
	if (lights[light_index].type > 0)
	{
		const float scalar = 0.4; // todo: needs to come from rdCamera_pCurCamera->attenuationMin
		intensity -= scalar * len;
	}
	else // jed attenuation for static lights
	{
		float range = 1.0 - len * lights[light_index].invFalloff;

		//range *= range; // squared
		intensity *= range * range; // gamma 2.0 compensation
	}

	if (intensity <= float(0.0))
		return;

#ifdef FRAG_ATTR_FETCH
	vec3 normal = fetch_vtx_normal();
#else
	vec3 normal = decode_octahedron_uint(params.normal);
#endif
	float lightMagnitude = sat1( dot(normal.xyz, lvec) * intensity );
	//float signedMagnitude = lightMagnitude;
	//lightMagnitude = max(lightMagnitude, float(0.0)) * intensity;

	vec3 cd = vec3(lightMagnitude);
	//if (lightMode == 5)
	//{
	//	// https://www.shadertoy.com/view/dltGWl
	//	// exp -> exp2, 3.0 * 1.4427 = 4.3281
	//	vec3 sss = exp2((-4.3281 * abs(signedMagnitude)) / (fillColor.rgb + 0.001));
	//	cd.xyz += fillColor.rgb * sss * (0.2 * intensity);
	//}
	//else
	//if(signedMagnitude <= 0.0)
	//{
	//	return;
	//}

	vec3 lightColor = lights[light_index].color.xyz;
	if (lights[light_index].type > 0)
	{
	 	result.diffuse = packF2x11_1x10(cd.rgb * lightColor.rgb + (unpackF2x11_1x10(result.diffuse)));
		//result.diffuse = cd.rgb * lightColor.rgb + result.diffuse;
	}
	else
	{
		lightColor *= vec3(unpackUnorm4x8(params.tint).rgb);
	}

	vec2 coeffs = unpackHalf2x16(params.spec_c);
#ifdef GGX	
	// Unity "Optimizing PBR"
	// https://community.arm.com/cfs-file/__key/communityserver-blogs-components-weblogfiles/00-00-00-20-66/siggraph2015_2D00_mmg_2D00_renaldas_2D00_slides.pdf
	// approximated microfacet GGX lobe, fresnel and visibility approximated with ldoth, spec color applied at the end
	//vec3  view  = decode_octahedron_uint(params.view);
	//vec3  h     = normalize(lvec + view);
	//float ndoth = clamp(dot(h, normal), float(0.0), float(1.0));
	//float ldoth = clamp(dot(h, lvec), float(0.0), float(1.0));
	//
	//float d       = (ndoth * ndoth) * (coeffs.x - float(1.0)) + float(1.00001);
	//      d       = coeffs.x / ((d * d) * max(float(0.1), ldoth * ldoth) * coeffs.y);

	#ifdef FRAG_ATTR_FETCH
		vec3 reflected = reflect(-fetch_vtx_dir(), fetch_vtx_normal());
	#else
		vec3 reflected = decode_octahedron_uint(params.reflected);
	#endif

	float rdotv = dot(reflected, lvec);
	float     d = (rdotv * rdotv) * coeffs.y + 1.00001;
	          d = coeffs.x * fastRcpNR1(d * d);
#else
	// "Physically Based Shading on Mobile"
	// https://www.unrealengine.com/en-US/blog/physically-based-shading-on-mobile
	// approximated energy conserving phong lobe, fresnel and spec color must be applied at the end with env_brdf
	#ifdef FRAG_ATTR_FETCH
		vec3 reflected = reflect(-fetch_vtx_dir(), fetch_vtx_normal());
	#else
		vec3 reflected = decode_octahedron_uint(params.reflected);
	#endif

	float rdotv  = dot(reflected, lvec);
	float d      = coeffs.x * fastExp2( coeffs.y * rdotv + (-coeffs.y) );
#endif

	result.specular = packF2x11_1x10((lightMagnitude * d) * lightColor.rgb + (unpackF2x11_1x10(result.specular)));
	//result.specular = lightColor.rgb * vec3(lightMagnitude * d) + result.specular;
}

#endif
