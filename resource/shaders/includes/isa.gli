// instruction set for simple dx8 style shader VM
//
// all instruction related decoding and branching is uniform/wave invariant (a.k.a scalar ops on AMD)
// everything reflecting that intent is prefixed with an s_

#include "defines.gli"
#include "uniforms.gli"

#ifndef ISA_H
#define ISA_H

#ifdef FRAGMENT_SHADER

// arithmetic op codes, must match std3D_ShaderAluOp
// todo: pass these into the code so they always match the enum
#define OP_NOP		 0	// no op
#define OP_ADD		 1	// addition
#define OP_CMP       2  // compare
#define OP_CND       3  // condition
#define OP_DIV       4  // division
#define OP_DP2       5  // dot2
#define OP_DP3		 6	// dot3
#define OP_DP4		 7	// dot4
#define OP_MAC       8  // multiply accumulate
#define OP_MAD		 9	// multiply add
#define OP_MAX		10	// maximum
#define OP_MIN		11	// minimum
#define OP_MIX		12	// mix/interpolate
#define OP_MOV		13	// move
#define OP_MUL		14	// multiply
#define OP_POW      15  // power
#define OP_SUB      16  // subtract
#define OP_TEX		17	// texture sample
#define OP_TEXDUDV  18  // texture sample with offset
#define OP_OPM      19  // offset parallax

// source types
#define REG_TYPE_GPR	0	// register
#define REG_TYPE_CLR	1	// color
#define REG_TYPE_CON	2	// constant
#define REG_TYPE_TEX	3	// texcoord
#define REG_TYPE_IMM8	4	// 8 bit immediate value
#define REG_TYPE_IMM16	5	// 16 bit immediate value
#define REG_TYPE_RSV1	6	// reserved for future use
#define REG_TYPE_SYS	7	// system value

#define REG_UNORM8 0
#define REG_SNORM8 1
#define REG_RG16F  2
#define REG_R32F   3

// source negate or invert
#define SRC_NEG_INV_NONE 0
#define SRC_NEG_INV_NEG  1	// negate: -x
#define SRC_NEG_INV_INV  2	// invert: 1 - x

// source scale and bias
#define SRC_SCALE_BIAS_NONE	0
#define SRC_SCALE_BIAS_2X	1	// x * 2
#define SRC_SCALE_BIAS_4X	2	// x * 4
#define SRC_SCALE_BIAS_D2	3	// x / 2
#define SRC_SCALE_BIAS_D4	4	// x / 4
#define SRC_SCALE_BIAS_BIAS	5	// x - 0.5
#define SRC_SCALE_BIAS_BX2	6	// x * 2 - 1

// source reduction operations
#define SRC_RED_NONE 0
#define SRC_RED_LUM  1	// dot(xyz, lum)
#define SRC_RED_SUM  2	// x+y+z
#define SRC_RED_AVG  3	// (x+y+z)/3
#define SRC_RED_MIN  4	// min(x,y,z)
#define SRC_RED_MAX  5	// max(x,y,z)
#define SRC_RED_MAG  6	// length(xyz)

// destination modifiers
#define DST_MOD_NONE     0 // no modifier
#define DST_MOD_X2       1 // x * 2
#define DST_MOD_X4       2 // x * 4
#define DST_MOD_D2       3 // x / 2
#define DST_MOD_D4       4 // x / 4
#define DST_MOD_POW2     5 // x * x
#define DST_MOD_POW4     6 // x * x
#define DST_MOD_SQRT     7 // sqrt(x)
#define DST_MOD_PACK     8 // x * 0.5 + 0.5
#define DST_MOD_ABS      9 // abs(x)
#define DST_MOD_NEG     10 // -x
#define DST_MOD_ROLLOFF 11 // x/(1+x)

// system register ids
#define SHADER_SYS_TIME 0
#define SHADER_SYS_VPOS 1
#define SHADER_SYS_Z 2
// material registers
#define SHADER_SYS_MAT_FILL         3
#define SHADER_SYS_MAT_ALBEDO       4
#define SHADER_SYS_MAT_EMISSIVE     5
#define SHADER_SYS_MAT_SPECULAR     6
#define SHADER_SYS_MAT_ROUGHNESS    7
#define SHADER_SYS_MAT_DISPLACEMENT 8

struct vm_dst
{
	uint addr;
	uint fmt;
	uint mask;
	uint dest;
	uint swizzle;
	uint modifier;
};

struct vm_src
{
	uint idx;
	uint addr;
	uint type;
	uint fmt;
	uint absolute;
	uint swizzle;
	uint scale_bias;
	uint neg_inv;
	uint reduction;
};

struct vm_instr
{
	uint   opcode;
	uint   imm;
	vm_dst dst;
	vm_src src0;
	vm_src src1;
	vm_src src2;
};

uint s_expand_mask(uint s_mask)
{
	uint s_result;
	s_result  = ((s_mask & 0x8) != 0) ? 0xFF000000u : 0x00000000u;
    s_result |= ((s_mask & 0x4) != 0) ? 0x00FF0000u : 0x00000000u;
    s_result |= ((s_mask & 0x2) != 0) ? 0x0000FF00u : 0x00000000u;
    s_result |= ((s_mask & 0x1) != 0) ? 0x000000FFu : 0x00000000u;
	return s_result;
}

void s_decode_opcode(out uint s_opcode, uint s_instr)
{
	s_opcode = (s_instr & 0x1F);
}

void s_decode_dst_operand(out vm_dst s_dst, uint s_instr)
{
	s_dst.fmt       = (s_instr >>  5) & 0x3;
	//spare         = (s_instr >>  7) & 0x1;
	s_dst.addr      = (s_instr >>  8) & 0xFF;
	s_dst.swizzle   = (s_instr >> 16) & 0xFF;
	s_dst.modifier  = (s_instr >> 24) &  0xF;
	s_dst.mask      = (s_instr >> 28) &  0xF;
	s_dst.mask      = s_expand_mask(s_dst.mask);
}

void s_decode_src_operand(out vm_src s_src, uint s_instr)
{
	s_src.type       = (s_instr      ) &  0x7;
	s_src.absolute   = (s_instr >>  3) &  0x1;
	s_src.fmt        = (s_instr >>  4) &  0x3;
	s_src.idx        = (s_instr >>  6) &  0x3;
	s_src.addr       = (s_instr >>  8) & 0xFF;
	s_src.swizzle    = (s_instr >> 16) & 0xFF;
	s_src.neg_inv    = (s_instr >> 24) &  0x3;
	s_src.scale_bias = (s_instr >> 26) &  0x7;
	s_src.reduction  = (s_instr >> 29) &  0x7;
}

void s_decode_instr(out vm_instr s_instr_out, uvec4 s_instr)
{
	s_instr_out.imm = s_instr.w;

	s_decode_opcode     (s_instr_out.opcode, s_instr.x);
	s_decode_dst_operand(s_instr_out.dst,    s_instr.x);
	s_decode_src_operand(s_instr_out.src0,   s_instr.y);
	s_decode_src_operand(s_instr_out.src1,   s_instr.z);
	s_decode_src_operand(s_instr_out.src2,   s_instr.w);
}

#endif

#endif
