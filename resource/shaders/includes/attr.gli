// common vertex attribute layout

#include "defines.gli"

#ifndef ATTR_H
#define ATTR_H

#ifdef VERTEX_SHADER

// input assembler attributes
in vec3 coord3d;	// vertex position
in vec4 v_normal;	// vertex normal
in vec4 v_color[2];	// up to 2 vertex colors
in vec4 v_uv[4];	// up to 4 texcoords

// attributes are exported
#define VAPI out

#else // VERTEX_SHADER

// attributes are imported
#define VAPI in

#endif // VERTEX_SHADER

#if defined(VERTEX_SHADER) || !defined(FRAG_ATTR_FETCH)

	VAPI vec4 f_color[COLOR_SETS];

	VAPI vec3 f_uv[UV_SETS];
	
	VAPI vec4 f_coord;
	VAPI vec3 f_normal;

	VAPI float f_lodbias;

	vec3 fetch_vtx_pos() { return f_coord.xyz; }
	vec3 fetch_vtx_dir() { return normalize(-f_coord.xyz); }
	vec2 fetch_vtx_uv(int i) { return f_uv[i].xy / f_uv[i].z; }
	vec3 fetch_vtx_normal() { return f_normal; }
	float fetch_vtx_depth() { return f_coord.w; }
	vec4 fetch_vtx_color(int i) { return f_color[i]; }	
	float fetch_vtx_lodbias() { return f_lodbias; }

#else

	#if defined(GL_EXT_fragment_shader_barycentric )

		#define gl_BaryCoord gl_BaryCoordEXT
		#define vertexAttribute(A, I) A[I]

		pervertexEXT VAPI vec4 f_color[COLOR_SETS][3];
		pervertexEXT VAPI vec3 f_uv[UV_SETS][3];
		pervertexEXT VAPI vec4 f_coord[3];
		pervertexEXT VAPI vec3 f_normal[3];

		pervertexEXT VAPI float f_lodbias;

	#elif defined(GL_AMD_shader_explicit_vertex_parameter)

		#define gl_BaryCoord gl_BaryCoordSmoothAMD
		#define vertexAttribute(A, I) interpolateAtVertexAMD(A, I)

		__explicitInterpAMD VAPI vec4 f_color[COLOR_SETS];
		__explicitInterpAMD VAPI vec3 f_uv[UV_SETS];
		__explicitInterpAMD VAPI vec4 f_coord;
		__explicitInterpAMD VAPI vec3 f_normal;
	
		__explicitInterpAMD VAPI float f_lodbias;

	#elif defined(GL_NV_fragment_shader_barycentric)

		#define gl_BaryCoord gl_BaryCoordNV
		#define vertexAttribute(A, I) A[I]

		pervertexNV VAPI vec4 f_color[COLOR_SETS][3];
		pervertexNV VAPI vec3 f_uv[UV_SETS][3];
		pervertexNV VAPI vec4 f_coord[3];
		pervertexNV VAPI vec3 f_normal[3];

		pervertexNV VAPI float f_lodbias;

	#endif

	vec4 lerp_attr4(vec4 v0, vec4 v1, vec4 vec2)
	{
		float a = gl_BaryCoord.x;
		float b = gl_BaryCoord.y;
		float c = (1.0 - a - b);
		return a * v0 + (b * v1 + (v2 * c));
	}

	vec3 lerp_attr3(vec3 v0, vec3 v1, vec3 vec2)
	{
		float a = gl_BaryCoord.x;
		float b = gl_BaryCoord.y;
		float c = (1.0 - a - b);
		return a * v0 + (b * v1 + (v2 * c));
	}

	float lerp_attr(float v0, float v1, float vec2)
	{
		float a = gl_BaryCoord.x;
		float b = gl_BaryCoord.y;
		float c = (1.0 - a - b);
		return a * v0 + (b * v1 + (v2 * c));
	}

	vec4 fetch_vtx_color(int i)
	{
		vec4 c0 = vertexAttribute(f_color[i], 0);
		vec4 c1 = vertexAttribute(f_color[i], 1);
		vec4 c2 = vertexAttribute(f_color[i], 2);
	
		return lerp_attr4(c0, c1, c2);
	}

	vec2 fetch_vtx_uv(int i)
	{
		vec3 uv0 = vertexAttribute(f_uv[i], 0).xyz;
		vec3 uv1 = vertexAttribute(f_uv[i], 1).xyz;
		vec3 uv2 = vertexAttribute(f_uv[i], 2).xyz;
	
		vec3 uv = lerp_attr3(uv0, uv1, uv2);
		return uv.xy / uv.z;
	}

	vec3 fetch_vtx_normal()
	{
		vec3 n0 = vertexAttribute(f_normal, 0).xyz;
		vec3 n1 = vertexAttribute(f_normal, 1).xyz;
		vec3 n2 = vertexAttribute(f_normal, 2).xyz;
	
		return lerp_attr3(n0, n1, n2);
	}

	vec3 fetch_vtx_pos()
	{
		vec3 v0 = vertexAttribute(f_coord, 0).xyz;
		vec3 v1 = vertexAttribute(f_coord, 1).xyz;
		vec3 v2 = vertexAttribute(f_coord, 2).xyz;
	
		return lerp_attr3(v0, v1, v2);
	}

	float fetch_vtx_depth()
	{
		float d0 = vertexAttribute(f_coord, 0).w;
		float d1 = vertexAttribute(f_coord, 1).w;
		float d2 = vertexAttribute(f_coord, 2).w;
	
		return lerp_attr(d0, d1, d2);
	}

	float fetch_vtx_lodbias()
	{
		return vertexAttribute(f_lodbias, 0).x;
	}

	vec3 fetch_vtx_dir()
	{
		return normalize(-fetch_vtx_pos());
	}
#endif

#endif // ATTR_H
