// shader fast math

import "defines.gli"

#ifndef FASTMATH_H
#define FASTMATH_H

// 12 cycles (3 operations) vs 16 (native sin) on AMD
// input must be -pi/2 to pi/2
float fastSin(float x)
{
	float x2 = x * x;
	return x * (-0.086584 * x2 + 0.848826);
}

vec2 fastSin(vec2 x)
{
	return vec2(fastSin(x.x), fastSin(x.y));
}

vec3 fastSin(vec3 x)
{
	return vec3(fastSin(x.x), fastSin(x.y), fastSin(x.z));
}

vec4 fastSin(vec4 x)
{
	return vec4(fastSin(x.x), fastSin(x.y), fastSin(x.z), fastSin(x.w));
}

float fastSinFull(float x)
{
	x = fract(x / M_2PI + 0.5);
	return fastSin(x * M_2PI - M_PI);
}

// 12 cycles (3 operations) vs 16 (native sin) on AMD
// input must be -pi/2 to pi/2
float fastCos(float x)
{
    float x2 = x * x;
    return x2 * (0.009f * x2 + -0.415f) + 1.0f;
}

vec2 fastCos(vec2 x)
{
	return vec2(fastCos(x.x), fastCos(x.y));
}

vec3 fastCos(vec3 x)
{
	return vec3(fastCos(x.x), fastCos(x.y), fastCos(x.z));
}

vec4 fastCos(vec4 x)
{
	return vec4(fastCos(x.x), fastCos(x.y), fastCos(x.z), fastCos(x.w));
}

float fastCosFull(float x)
{
    x = mod(x, M_2PI);
    x = (x > M_PI) ? M_2PI - x : x;
    return fastCos(M_2PI * 2.0 + -x);
}

// https://seblagarde.wordpress.com/2014/12/01/inverse-trigonometric-functions-gpu-optimization-for-amd-gcn-architecture/
// max absolute error 1.3x10^-3
// Eberly's odd polynomial degree 5 - respect bounds
// 4 VGPR, 14 FR (10 FR, 1 QR), 2 scalar
// input [0, infinity] and output [0, PI/2]
float atanPos(float x) 
{ 
    float t0 = (x < 1.0) ? x : 1.0 / x;
    float t1 = t0 * t0;
    float poly = 0.0872929;
    poly = -0.301895 + poly * t1;
    poly = 1.0 + poly * t1;
    poly = poly * t0;
    return (x < 1.0) ? poly : 1.570796 - poly;
}

// 4 VGPR, 16 FR (12 FR, 1 QR), 2 scalar
// input [-infinity, infinity] and output [-PI/2, PI/2]
float atanFast(float x) 
{     
    float t0 = atanPos(abs(x));     
    return (x < 0.0) ? -t0: t0; 
}

float atan2Fast(float y, float x)
{
    return atanFast(y / x) + (y >= 0.0 ? M_PI : -M_PI) * (x < 0.0 ? 1.0 : 0.0);
}

float acosFast(float x) 
{ 
    x = abs(x); 
    float res = -0.156583 * x + 1.570796; 
    res *= sqrt(1.0 - x); 
    return (x >= 0) ? res : M_PI - res; 
}

const uint IEEEScale = 0x4B000000;
const uint IEEEInvScale = 0x34000000;
const uint IEEEOffset = 0x42FE0000;
const uint IEEEScaleOffset = 0x4E7E0000;


float fastLog2(float v)
{
    return float(floatBitsToUint(v)) * uintBitsToFloat(IEEEInvScale) - uintBitsToFloat(IEEEOffset);
}
vec2 fastLog2(vec2 v)
{
    return vec2(fastLog2(v.x), fastLog2(v.y));
}
vec3 fastLog2(vec3 v)
{
    return vec3(fastLog2(v.x), fastLog2(v.y), fastLog2(v.z));
}
vec4 fastLog2(vec4 v)
{
    return vec4(fastLog2(v.x), fastLog2(v.y), fastLog2(v.z), fastLog2(v.w));
}

float fastExp2(float v)
{
    return uintBitsToFloat(uint(v * uintBitsToFloat(IEEEScale) + uintBitsToFloat(IEEEScaleOffset)));
}
vec2 fastExp2(vec2 v)
{
    return vec2(fastExp2(v.x), fastExp2(v.y));
}
vec3 fastExp2(vec3 v)
{
    return vec3(fastExp2(v.x), fastExp2(v.y), fastExp2(v.z));
}
vec4 fastExp2(vec4 v)
{
    return vec4(fastExp2(v.x), fastExp2(v.y), fastExp2(v.z), fastExp2(v.w));
}

float fastPow(float b, float p)
{
    return uintBitsToFloat(uint(p * float(floatBitsToUint(b)) - (p - 1.0) * uintBitsToFloat(IEEEScaleOffset)));
}
vec2 fastPow(vec2 b, vec2 p)
{
    return vec2(fastPow(b.x, p.x), fastPow(b.y, p.y));
}
vec3 fastPow(vec3 b, vec3 p)
{
    return vec3(fastPow(b.x, p.x), fastPow(b.y, p.y), fastPow(b.z, p.z));
}
vec4 fastPow(vec4 b, vec4 p)
{
    return vec4(fastPow(b.x, p.x), fastPow(b.y, p.y), fastPow(b.z, p.z), fastPow(b.w, p.w));
}

const int IEEE_INT_RCP_CONST_NR0 = 0x7EF311C2;
const int IEEE_INT_RCP_CONST_NR1 = 0x7EF311C3;
const int IEEE_INT_RCP_CONST_NR2 = 0x7EF312AC;

const int IEEE_INT_SQRT_CONST_NR0 =  0x1FBD1DF5;

// Biases for global ranges
// 0-1 or 1-2 specific ranges might improve from different bias
// Derived from batch testing
const int IEEE_INT_RCP_SQRT_CONST_NR0        = 0x5f3759df;
const int IEEE_INT_RCP_SQRT_CONST_NR1        = 0x5F375A86;
const int IEEE_INT_RCP_SQRT_CONST_NR2        = 0x5F375A86;

// Normalized range [0,1] Constants
const int IEEE_INT_RCP_CONST_NR0_SNORM       = 0x7EEF370B;
const int IEEE_INT_SQRT_CONST_NR0_SNORM      = 0x1FBD1DF5;
const int IEEE_INT_RCP_SQRT_CONST_NR0_SNORM  = 0x5F341A43;

//
// RCP SQRT
//

// Approximate guess using integer float arithmetics based on IEEE floating point standard
float rcpSqrtIEEEIntApproximation(float inX, const int inRcpSqrtConst)
{
	int x = floatBitsToInt(inX);
	x = inRcpSqrtConst - (x >> 1);
	return intBitsToFloat(x);
}

float rcpSqrtNewtonRaphson(float inXHalf, float inRcpX)
{
	return inRcpX * (-inXHalf * (inRcpX * inRcpX) + 1.5);
}

//
// Using 0 Newton Raphson iterations
// Relative error : ~3.4% over full
// Precise format : ~small float
// 2 ALU
//
float fastRcpSqrtNR0(float inX)
{
	float  xRcpSqrt = rcpSqrtIEEEIntApproximation(inX, IEEE_INT_RCP_SQRT_CONST_NR0);
	return xRcpSqrt;
}
vec2 fastRcpSqrtNR0(vec2 v)
{
    return vec2(fastRcpSqrtNR0(v.x), fastRcpSqrtNR0(v.y));
}
vec3 fastRcpSqrtNR0(vec3 v)
{
    return vec3(fastRcpSqrtNR0(v.x), fastRcpSqrtNR0(v.y), fastRcpSqrtNR0(v.z));
}
vec4 fastRcpSqrtNR0(vec4 v)
{
    return vec4(fastRcpSqrtNR0(v.x), fastRcpSqrtNR0(v.y), fastRcpSqrtNR0(v.z), fastRcpSqrtNR0(v.w));
}

//
// Using 1 Newton Raphson iterations
// Relative error : ~0.2% over full
// Precise format : ~half float
// 6 ALU
//
float fastRcpSqrtNR1(float inX)
{
	float  xhalf = 0.5 * inX;
	float  xRcpSqrt = rcpSqrtIEEEIntApproximation(inX, IEEE_INT_RCP_SQRT_CONST_NR1);
	xRcpSqrt = rcpSqrtNewtonRaphson(xhalf, xRcpSqrt);
	return xRcpSqrt;
}
vec2 fastRcpSqrtNR1(vec2 v)
{
    return vec2(fastRcpSqrtNR1(v.x), fastRcpSqrtNR1(v.y));
}
vec3 fastRcpSqrtNR1(vec3 v)
{
    return vec3(fastRcpSqrtNR1(v.x), fastRcpSqrtNR1(v.y), fastRcpSqrtNR1(v.z));
}
vec4 fastRcpSqrtNR1(vec4 v)
{
    return vec4(fastRcpSqrtNR1(v.x), fastRcpSqrtNR1(v.y), fastRcpSqrtNR1(v.z), fastRcpSqrtNR1(v.w));
}

//
// Using 2 Newton Raphson iterations
// Relative error : ~4.6e-004%  over full
// Precise format : ~full float
// 9 ALU
//
float fastRcpSqrtNR2(float inX)
{
	float  xhalf = 0.5 * inX;
	float  xRcpSqrt = rcpSqrtIEEEIntApproximation(inX, IEEE_INT_RCP_SQRT_CONST_NR2);
	xRcpSqrt = rcpSqrtNewtonRaphson(xhalf, xRcpSqrt);
	xRcpSqrt = rcpSqrtNewtonRaphson(xhalf, xRcpSqrt);
	return xRcpSqrt;
}
vec2 fastRcpSqrtNR2(vec2 v)
{
    return vec2(fastRcpSqrtNR2(v.x), fastRcpSqrtNR2(v.y));
}
vec3 fastRcpSqrtNR2(vec3 v)
{
    return vec3(fastRcpSqrtNR2(v.x), fastRcpSqrtNR2(v.y), fastRcpSqrtNR2(v.z));
}
vec4 fastRcpSqrtNR2(vec4 v)
{
    return vec4(fastRcpSqrtNR2(v.x), fastRcpSqrtNR2(v.y), fastRcpSqrtNR2(v.z), fastRcpSqrtNR2(v.w));
}

//
// SQRT
//
float sqrtIEEEIntApproximation(float inX, const int inSqrtConst)
{
	int x = floatBitsToInt(inX);
	x = inSqrtConst + (x >> 1);
	return intBitsToFloat(x);
}

//
// Using 0 Newton Raphson iterations
// Relative error : < 0.7% over full
// Precise format : ~small float
// 1 ALU
//
float fastSqrtNR0(float inX)
{
	float  xRcp = sqrtIEEEIntApproximation(inX, IEEE_INT_SQRT_CONST_NR0);
	return xRcp;
}
vec2 fastSqrtNR0(vec2 v)
{
    return vec2(fastSqrtNR0(v.x), fastSqrtNR0(v.y));
}
vec3 fastSqrtNR0(vec3 v)
{
    return vec3(fastSqrtNR0(v.x), fastSqrtNR0(v.y), fastSqrtNR0(v.z));
}
vec4 fastSqrtNR0(vec4 v)
{
    return vec4(fastSqrtNR0(v.x), fastSqrtNR0(v.y), fastSqrtNR0(v.z), fastSqrtNR0(v.w));
}

//
// Use inverse Rcp Sqrt
// Using 1 Newton Raphson iterations
// Relative error : ~0.2% over full
// Precise format : ~half float
// 6 ALU
//
float fastSqrtNR1(float inX)
{
	// Inverse Rcp Sqrt
	return inX * fastRcpSqrtNR1(inX);
}
vec2 fastSqrtNR1(vec2 v)
{
    return vec2(fastSqrtNR1(v.x), fastSqrtNR1(v.y));
}
vec3 fastSqrtNR1(vec3 v)
{
    return vec3(fastSqrtNR1(v.x), fastSqrtNR1(v.y), fastSqrtNR1(v.z));
}
vec4 fastSqrtNR1(vec4 v)
{
    return vec4(fastSqrtNR1(v.x), fastSqrtNR1(v.y), fastSqrtNR1(v.z), fastSqrtNR1(v.w));
}

//
// Use inverse Rcp Sqrt
// Using 2 Newton Raphson iterations
// Relative error : ~4.6e-004%  over full
// Precise format : ~full float
// 9 ALU
//
float fastSqrtNR2(float inX)
{
	// Inverse Rcp Sqrt
	return inX * fastRcpSqrtNR2(inX);
}
vec2 fastSqrtNR2(vec2 v)
{
    return vec2(fastSqrtNR2(v.x), fastSqrtNR2(v.y));
}
vec3 fastSqrtNR2(vec3 v)
{
    return vec3(fastSqrtNR2(v.x), fastSqrtNR2(v.y), fastSqrtNR2(v.z));
}
vec4 fastSqrtNR2(vec4 v)
{
    return vec4(fastSqrtNR2(v.x), fastSqrtNR2(v.y), fastSqrtNR2(v.z), fastSqrtNR2(v.w));
}
//
// RCP
//

float rcpIEEEIntApproximation(float inX, const int inRcpConst)
{
	int x = floatBitsToInt(inX);
	x = inRcpConst - x;
	return intBitsToFloat(x);
}

float rcpNewtonRaphson(float inX, float inRcpX)
{
	return inRcpX * (-inRcpX * inX + 2.0);
}

//
// Using 0 Newton Raphson iterations
// Relative error : < 0.4% over full
// Precise format : ~small float
// 1 ALU
//
float fastRcpNR0(float inX)
{
	float  xRcp = rcpIEEEIntApproximation(inX, IEEE_INT_RCP_CONST_NR0);
	return xRcp;
}
vec2 fastRcpNR0(vec2 v)
{
    return vec2(fastRcpNR0(v.x), fastRcpNR0(v.y));
}
vec3 fastRcpNR0(vec3 v)
{
    return vec3(fastRcpNR0(v.x), fastRcpNR0(v.y), fastRcpNR0(v.z));
}
vec4 fastRcpNR0(vec4 v)
{
    return vec4(fastRcpNR0(v.x), fastRcpNR0(v.y), fastRcpNR0(v.z), fastRcpNR0(v.w));
}
//
// Using 1 Newton Raphson iterations
// Relative error : < 0.02% over full
// Precise format : ~half float
// 3 ALU
//
float fastRcpNR1(float inX)
{
	float  xRcp = rcpIEEEIntApproximation(inX, IEEE_INT_RCP_CONST_NR1);
	xRcp = rcpNewtonRaphson(inX, xRcp);
	return xRcp;
}
vec2 fastRcpNR1(vec2 v)
{
    return vec2(fastRcpNR1(v.x), fastRcpNR1(v.y));
}
vec3 fastRcpNR1(vec3 v)
{
    return vec3(fastRcpNR1(v.x), fastRcpNR1(v.y), fastRcpNR1(v.z));
}
vec4 fastRcpNR1(vec4 v)
{
    return vec4(fastRcpNR1(v.x), fastRcpNR1(v.y), fastRcpNR1(v.z), fastRcpNR1(v.w));
}
//
// Using 2 Newton Raphson iterations
// Relative error : < 5.0e-005%  over full
// Precise format : ~full float
// 5 ALU
//
float fastRcpNR2(float inX)
{
	float  xRcp = rcpIEEEIntApproximation(inX, IEEE_INT_RCP_CONST_NR2);
	xRcp = rcpNewtonRaphson(inX, xRcp);
	xRcp = rcpNewtonRaphson(inX, xRcp);
	return xRcp;
}
vec2 fastRcpNR2(vec2 v)
{
    return vec2(fastRcpNR2(v.x), fastRcpNR2(v.y));
}
vec3 fastRcpNR2(vec3 v)
{
    return vec3(fastRcpNR2(v.x), fastRcpNR2(v.y), fastRcpNR2(v.z));
}
vec4 fastRcpNR2(vec4 v)
{
    return vec4(fastRcpNR2(v.x), fastRcpNR2(v.y), fastRcpNR2(v.z), fastRcpNR2(v.w));
}


#endif
