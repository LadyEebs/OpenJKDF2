// uniforms and uniform buffers

import "defines.gli"

#ifndef UNIFORMS_H
#define UNIFORMS_H

#define U_MODEL_MATRIX		0
#define U_PROJ_MATRIX		1
#define U_VIEW_MATRIX		2
#define U_VIEW_MATRIX_INV   3
#define U_MODEL_MATRIX_PREV 4
#define U_MODEL_VIEW_PREV   5

#define U_LIGHT_MODE   6
#define U_GEO_MODE     7
#define U_BLEND_MODE   8

#define U_FLAGS       9
#define U_OVERBRIGHT		10
#define U_INV_OVERBRIGHT    11

#define U_AMB_COLOR   12
#define U_AMB_CENTER  13
#define U_AMB_NUM_SG  14
#define U_AMB_SGS     15

// todo: move me
layout(location = U_MODEL_MATRIX) uniform mat4 modelMatrix;
layout(location = U_PROJ_MATRIX) uniform mat4 projMatrix;
layout(location = U_VIEW_MATRIX) uniform mat4 viewMatrix;
layout(location = U_VIEW_MATRIX_INV) uniform mat4 viewMatrixInv;

#ifdef MOTION_BLUR
layout(location = U_MODEL_MATRIX_PREV) uniform mat4 modelMatrixPrev;
layout(location = U_MODEL_VIEW_PREV) uniform mat4 viewMatrixPrev;
#endif

#ifdef WORLD

layout(location = U_LIGHT_MODE) uniform int lightMode;
layout(location = U_GEO_MODE) uniform int geoMode;
layout(location = U_BLEND_MODE) uniform int blend_mode;
//uniform int ditherMode;

layout(location = U_INV_OVERBRIGHT) uniform float light_mult;
layout(location = U_OVERBRIGHT) uniform float invlightMult;

layout(location = U_FLAGS) uniform int aoFlags;
layout(location = U_AMB_COLOR) uniform vec4 ambientColor;
layout(location = U_AMB_CENTER) uniform vec4 ambientCenter;
layout(location = U_AMB_NUM_SG) uniform uint ambientNumSG; // get around loop unrolling
layout(location = U_AMB_SGS) uniform vec4 ambientSG[AMBIENT_LOBES];

#endif

#define UBO_SLOT_LIGHTS        0
#define UBO_SLOT_OCCLUDERS     1
#define UBO_SLOT_DECALS        2
#define UBO_SLOT_SHARED        3
#define UBO_SLOT_FOG           4
#define UBO_SLOT_TEX           5
#define UBO_SLOT_MATERIAL      6
#define UBO_SLOT_SHADER        7
#define UBO_SLOT_SHADER_CONSTS 8

// Shared uniforms across batch calls and render passes
layout(binding = UBO_SLOT_SHARED, std140) uniform sharedBlock
{
	vec4  ambientSGBasis[AMBIENT_LOBES];

	vec4  mipDistances;

	float timeSeconds;
	float pad0, pad1;
	//float light_mult;
	//float invlightMult;
	float ditherScale;

	vec2  iResolution;
	vec2  clusterTileSizes;
	
	vec2  clusterScaleBias;	
	float deltaTime;
	float ditherScaleAlways;

	vec4 aScaleBias[8];

	//vec2 resolution2;
	//vec2 padding;
};

// Fog state
layout(binding = UBO_SLOT_FOG, std140) uniform fogBlock
{
	vec4  fogColor;
	int   fogEnabled;
	float fogStart;
	float fogEnd;
	float fogAnisotropy;
	vec4  fogLightDir;
};

// Texture state
// todo: TMUs
layout(binding = UBO_SLOT_TEX, std140) uniform textureBlock
{
	int   tex_mode;
	int   uv_mode;
	int   texgen;
	int   numMips;

	vec2 texsize;
	ivec2 itexsize;

	vec4 uv_offset[4];

	vec4 texgen_params;

	vec4 padding1;
};

// Material state
layout(binding = UBO_SLOT_MATERIAL, std140) uniform materialBlock
{	
	vec4 fillColor;
	vec4 albedoFactor;
	vec4 emissiveFactor;
	vec4 specularFactor;

	float displacement_factor;
	float roughnessFactor;
	float texPad1, texPad2;
};

// Global light buffer
struct light
{
	vec4  position;
	vec4  direction_intensity;
	vec4  right;
	vec4  up;

	vec4 color;

	float radiusSqr;
	uint lux_intensity;
	float invFalloff;
	uint falloffType;
	
	int   type;
	float falloffMin;
	float falloffMax;
	float lux;
	
	float angleX;
	float cosAngleX;
	float angleY;
	float cosAngleY;
};

layout(binding = UBO_SLOT_LIGHTS, std140) uniform lightBlock
{
	uint firstLight;
	uint numLights;
	uint lightPad0, lightPad1;
	light lights[CLUSTER_MAX_LIGHTS];
};

// Global occluder buffer
struct occluder
{
	vec4 position;
	float invRadius;
	float pad0, pad1, pad2;
};

layout(binding = UBO_SLOT_OCCLUDERS, std140) uniform occluderBlock
{
	uint firstOccluder;
	uint numOccluders;
	uint occluderPad0, occluderPad1;
	occluder occluders[CLUSTER_MAX_OCCLUDERS];
};

// Global deceal buffer
struct decal
{
	mat4  decalMatrix;
	mat4  invDecalMatrix;
	vec4  uvScaleBias;
	vec4  posRad;
	vec4  color;
	uint  flags;
	float angleFade;
	float padding0;
	float padding1;
};

layout(binding = UBO_SLOT_DECALS, std140) uniform decalBlock
{
	uint  firstDecal;
	uint  numDecals;
	uint  decalPad0, decalPad1;
	decal decals[CLUSTER_MAX_DECALS];
};

// Shader buffer
layout(binding = UBO_SLOT_SHADER, std140) uniform shaderBlock
{	
	float shaderVersion;
	uint  shaderPadding0, shaderPadding1;
	uint  shaderInstructionCount;
	uvec4 shaderInstructions[32];
};

// Shader constants buffer
layout(binding = UBO_SLOT_SHADER_CONSTS, std140) uniform shaderConstantsBlock
{
	vec4 shaderConstants[8];
};


float linearize_depth(float d)
{
	float znear = -projMatrix[3].z / (projMatrix[1].z + 1.0);
	float zfar  = -projMatrix[3].z / (projMatrix[1].z - 1.0);

	float z_n = 2.0 * d - 1.0;
    return 2.0 * znear * zfar / (zfar + znear - z_n * (zfar - znear));
}

#endif
