// math utilities

import "fastmath.gli"

#ifndef MATH_H
#define MATH_H

// packing
vec4 unpack_argb2101010(uint packedInput)
{
	return vec4(
		(packedInput >> 20u) & 0x3FFu,
		(packedInput >> 10u) & 0x3FFu,
		(packedInput >>  0u) & 0x3FFu,
		(packedInput >> 30u) &   0x1u
	);
}

uint pack_argb2101010(vec4 unpackedInput)
{
	return (uint(unpackedInput.r) << 20u)
		 | (uint(unpackedInput.g) << 10u)
		 | (uint(unpackedInput.b) <<  0u)
		 | (uint(unpackedInput.a) << 30u);
}

// mini float decoding
float miniBitsToFloat(uint u8)
{
	uint exponent = (u8 >> 4) & 0x0F;
	uint significand = u8 & 0x0F;
	if (exponent == 0) return 0.0;

	float value = 1.0 + float(significand) / 16.0;
	return value * exp2(float(exponent) - 7.0);
}

// encoding
uint encodeHemiUnitVector(vec3 v)
{
    vec2 res = v.xy / (abs(v.x) + abs(v.y) + abs(v.z));
    return packHalf2x16(vec2(res.x + res.y, res.x - res.y));
}

vec3 decodeHemiUnitVector(uint enc)
{
	vec2 v = unpackHalf2x16(enc);
	
	vec2 val = vec2(v.x + v.y, v.x - v.y) * 0.5;
	vec3 n = vec3(val, 1.0 - abs(v.x) - abs(v.y));
	
	return normalize(n);
}

uint encode_octahedron_uint(vec3 v)
{
	v /= abs(v.x) + abs(v.y) + abs(v.z);

	float t = saturate(-v.z);
	return packHalf2x16(v.xy + vec2(v.x >= 0.0 ? t : -t, v.y >= 0.0 ? t : -t));
}

vec3 decode_octahedron_uint(uint p)
{
	vec2 v = unpackHalf2x16(p);

	vec3  n = vec3(v.x, v.y, 1.0 - abs(v.x) - abs(v.y));
    float t = saturate(-n.z);
    n.xy   += vec2(n.x >= 0.0 ? -t : t, n.y >= 0.0 ? -t : t);

    return normalize(n);
}

// https://ubm-twvideo01.s3.amazonaws.com/o1/vault/gdc2015/presentations/McAuley_Stephen_Rendering_the_World.pdf
vec4 tbnToQuat(mat3 m)
{
	vec3 tangent  = m[0];
	vec3 binormal = m[1];
	vec3 normal   = m[2];
	
	vec4 quat;
	quat.x = normal.y - binormal.z;
	quat.y = tangent.z - normal.x;
	quat.z = binormal.x - tangent.y;
	quat.w = 1.0 + tangent.x + binormal.y + normal.z;
	
	return normalize(quat);
}

mat3 quatToTbn(vec4 quat)
{
	mat3 m;
	m[0] = vec3(1,0,0)
		+ vec3(-2, 2, 2) * quat.y * quat.yxw
		+ vec3(-2, -2, 2) * quat.z * quat.zwx;
	
	m[1] = vec3(0,1,0)
		+ vec3(2, -2, 2) * quat.z * quat.wzy
		+ vec3(2, -2, -2) * quat.x * quat.yxw;
		
	m[2] = vec3(0, 0, 1)
		+ vec3(2, 2, -2) * quat.x * quat.zwx
		+ vec3(-2,2,-2) * quat.y * quat.wzy;

	return m;
}

uint findBiggestComponent(vec4 q)
{
    uint xyzIndex = uint(cubeFaceIndex(q.xyz) * 0.5);
    uint wIndex = 3;

    bool wBiggest = abs(q.w) > max3(abs(q.x), abs(q.y), abs(q.z));

    return wBiggest ? wIndex : xyzIndex;
}

vec4 packQuat(vec4 quat)
{
    uint index = findBiggestComponent(quat);

    if (index == 0u) quat = quat.yzwx;
    if (index == 1u) quat = quat.xzwy;
    if (index == 2u) quat = quat.xywz;

    vec4 packedQuat;
    packedQuat.xyz = quat.xyz * sign(quat.w) * sqrt(0.5) + 0.5;
    packedQuat.w = float(index) / 3.0;

    return packedQuat;
}

vec4 unpackQuat(vec4 packedQuat)
{
    uint index = uint(packedQuat.w * 3.0);

    vec4 quat;
    quat.xyz = packedQuat.xyz * sqrt(2.0) - (inversesqrt(2.0));
    quat.w = sqrt(1.0 - saturate(dot(quat.xyz, quat.xyz)));

    if (index == 0u) quat = quat.wxyz;
    if (index == 1u) quat = quat.xwyz;
    if (index == 2u) quat = quat.xywz;

    return quat;
}

uint encodeQuat(vec4 quat)
{
	return packUnorm4x10_2(packQuat(quat));	
}

vec4 decodeQuat(uint q)
{
	return unpackQuat(unpackUnorm4x10_2(q));
}


float fastSqrtInvAroundOne(float x)
{
	const float a0 =  15.0f / 8.0f;
	const float a1 = -5.0f / 4.0f;
	const float a2 =  3.0f / 8.0f;
   
	return a2 * (x * x) + (a1 * x + a0);
}
 
float fastLength(vec3 v)
{
	float len_sq = v.x * v.x + (v.y * v.y + (v.z * v.z));
	return fastSqrtNR0(len_sq);
}

vec3 normalizeNear1(vec3 v)
{
	float len_sq = v.x * v.x + (v.y * v.y + (v.z * v.z));
	float len_inv = fastSqrtInvAroundOne(len_sq);
	return v.xyz * len_inv;
}

vec3 normalizeVeryApprox(vec3 v)
{
	float len_sq = v.x * v.x + (v.y * v.y + (v.z * v.z));
	return (v * 0.5) * (1.0 - len_sq) + v;
}

vec4 rgb_clamp2( vec4 rgb )
{
    rgb.rgb = rgb.rgb * fastRcpNR0(max(1.0, max( rgb.x, max( rgb.y, rgb.z ) )));
	return rgb;
}

float luminance(vec3 c_rgb)
{
    return dot(c_rgb, vec3(0.2125, 0.7154, 0.0721));
}

vec4 pow2(vec4 x)
{
	return x * x;
}

vec4 pow4(vec4 x)
{
	x = pow2(x);
	return pow2(x);
}

float rolloff(float x, float cutoff, float soft)
{
    float low   = cutoff - soft;
	float high  = cutoff + soft;
	float scale = -1.0f / (4.0f * soft);
	
	if(x <= low)
		return x;
        
	if(x >= high)
		return cutoff;
	
	return -1.0f / (4.0f * soft) * (x * x - 2.0f * high * x + low * low);
}

float rolloff_fixed(float x)
{
    // quadratic falloff around 1.0 with a softness of 0.1
    float quadratic = -2.5 * (x * x) + (5.5 * x - 2.025);
   
    float result = x < 0.9 ?   x : quadratic; // linear segment vs quadratic
    result       = x > 1.1 ? 1.0 : result;    // clamp upper bound
    
    return result;
}

vec3 project_to_sphere(vec3 pos, vec3 reflected, vec3 center, float radius)
{
	vec3  v  = pos.xyz - center.xyz;
	float lenSq = dot(v, v);
	float dp = dot(reflected, v);
	float d = dp * dp - (-radius * radius + lenSq);
	
	if (d < 0)
		return reflected;

	return normalize((sqrt(d) - dp) * reflected + v);
}

// conversions


//Source: https://github.com/tobspr/GLSL-Color-Spaces/blob/master/ColorSpaces.inc.glsl
const float SRGB_ALPHA = 0.055;
float linear2srgb(float x)
{
	if(x <= 0.0031308)
		return 12.92 * x;
	else
		return(1. + SRGB_ALPHA) * pow(x, 1.0 / 2.4) - SRGB_ALPHA;
}
vec3 rgb2srgb(vec3 c)
{
	return vec3(
		linear2srgb(c.r),
		linear2srgb(c.g),
		linear2srgb(c.b)
	);
}

float srgb2linear(float x)
{
	if(x <= 0.04045)
		return x / 12.92;
	else
		return pow((x + SRGB_ALPHA) / (1.0 + SRGB_ALPHA), 2.4);
}

vec3 srgb2rgb(vec3 c)
{
	return vec3(
		srgb2linear(c.r),
		srgb2linear(c.g),
		srgb2linear(c.b)
	);
}

vec3 rgb2ycocg(vec3 RGB)
{
    vec3 o;
    o.x =  0.25 * RGB.r + 0.5 * RGB.g + 0.25 * RGB.b;
    o.y =   0.5 * RGB.r - 0.5 * RGB.b;
    o.z = -0.25 * RGB.r + 0.5 * RGB.g - 0.25 * RGB.b;

	//o.yz += (0.5 * 256.0 / 255.0);
	o.yz *= 2.0;

    return o;
}

vec3 ycocg2rgb(vec3 YCoCg)
{
	//YCoCg.yz = YCoCg.yz - (0.5 * 256.0 / 255.0);
	YCoCg.yz *= 0.5;

    vec3 o;
    o.r = YCoCg.x + YCoCg.y - YCoCg.z;
    o.g = YCoCg.x + YCoCg.z;
    o.b = YCoCg.x - YCoCg.y - YCoCg.z;
    return o;
}


vec3 rgb2ycocg_unorm(vec3 RGB)
{
    vec3 o;
    o.x =  0.25 * RGB.r + 0.5 * RGB.g + 0.25 * RGB.b;
    o.y =   0.5 * RGB.r - 0.5 * RGB.b;
    o.z = -0.25 * RGB.r + 0.5 * RGB.g - 0.25 * RGB.b;

	o.yz += (0.5 * 256.0 / 255.0);

    return o;
}

vec3 ycocg2rgb_unorm(vec3 YCoCg)
{
	YCoCg.yz = YCoCg.yz - (0.5 * 256.0 / 255.0);

    vec3 o;
    o.r = YCoCg.x + YCoCg.y - YCoCg.z;
    o.g = YCoCg.x + YCoCg.z;
    o.b = YCoCg.x - YCoCg.y - YCoCg.z;
    return o;
}


const mat3 yiq_mat = mat3
(
    0.2989, 0.5959, 0.2115,
    0.5870, -0.2744, -0.5229,
    0.1140, -0.3216, 0.3114
);

vec3 rgb2yiq(vec3 col)
{
    return yiq_mat * col;
}

const mat3 yiq2rgb_mat = mat3
(
    1.0, 1.0, 1.0,
    0.956, -0.2720, -1.1060,
    0.6210, -0.6474, 1.7046
);

vec3 yiq2rgb(vec3 yiq)
{
    return yiq2rgb_mat * yiq;
}

// M matrix, for encoding
const mat3 logLuvM = mat3(
    0.2209, 0.3390, 0.4184,
    0.1138, 0.6780, 0.7319,
    0.0102, 0.1130, 0.2969);

// Inverse M matrix, for decoding
const mat3 logLuvInvM = mat3(
    6.0013,    -2.700,    -1.7995,
    -1.332,    3.1029,    -5.7720,
    .3007,    -1.088,    5.6268);   

// transforms
vec3 transform44(mat4 m, vec3 a) // transform a vec3 with w = 1
{
	return a.x * m[0].xyz + (a.y * m[1].xyz + (a.z * m[2].xyz + m[3].xyz));
}

// misc
float Schlick(float k, float costh)
{
    return (1.0 - k * k) / (4.0 * M_PI * pow(1.0 - k * costh, 2.0));
}

float simplePhase(vec3 viewDir, vec3 lightDir, float anisotropy)
{
	//return textureLod(dithertex, vec2(anisotropy, dot(lightDir.xyz, viewDir) * 0.5 + 0.5), 0.0).r;
	float k = anisotropy;
	float c = 1.0 - k * dot(lightDir.xyz, viewDir.xyz);
	return (1.0 - k * k) * fastRcpNR0(c * c);
}

#endif
