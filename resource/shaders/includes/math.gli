// math utilities

#include "fastmath.gli"

#ifndef MATH_H
#define MATH_H

// if we don't have native support for findLSB (necessary for the clustered bit scan), implement it
#ifndef GL_ARB_gpu_shader5
uint bitCount(uint n)
{
    n = ((0xaaaaaaaau & n) >>  1u) + (0x55555555u & n);
    n = ((0xccccccccu & n) >>  2u) + (0x33333333u & n);
    n = ((0xf0f0f0f0u & n) >>  4u) + (0x0f0f0f0fu & n);
    n = ((0xff00ff00u & n) >>  8u) + (0x00ff00ffu & n);
    n = ((0xffff0000u & n) >> 16u) + (0x0000ffffu & n);
    return n;
}

int findLSB(uint x)
{
	return (x == 0u) ? -1 : int( bitCount(~x & (x - 1u)) );
}
#endif

uint findLSB_unsafe(uint x) // same as above but doesn't account for 0 inputs
{
#ifndef GL_ARB_gpu_shader5
	return bitCount(~x & (x - 1u));
#else // use the intrinsic and cast
	return uint(findLSB(x));
#endif
}

// packing
vec4 unpack_argb2101010(uint packedInput)
{
	return vec4(
		(packedInput >> 20u) & 0x3FFu,
		(packedInput >> 10u) & 0x3FFu,
		(packedInput >>  0u) & 0x3FFu,
		(packedInput >> 30u) &   0x1u
	);
}

uint pack_argb2101010(vec4 unpackedInput)
{
	return (uint(unpackedInput.r) << 20u)
		 | (uint(unpackedInput.g) << 10u)
		 | (uint(unpackedInput.b) <<  0u)
		 | (uint(unpackedInput.a) << 30u);
}

// encoding
uint encodeHemiUnitVector(vec3 v)
{
    vec2 res = v.xy / (abs(v.x) + abs(v.y) + abs(v.z));
    return packHalf2x16(vec2(res.x + res.y, res.x - res.y));
}

vec3 decodeHemiUnitVector(uint enc)
{
	vec2 v = unpackHalf2x16(enc);
	
	vec2 val = vec2(v.x + v.y, v.x - v.y) * 0.5;
	vec3 n = vec3(val, 1.0 - abs(v.x) - abs(v.y));
	
	return normalize(n);
}

uint encode_octahedron_uint(vec3 v)
{
	v /= abs(v.x) + abs(v.y) + abs(v.z);

	float t = sat1(-v.z);
	return packHalf2x16(v.xy + vec2(v.x >= 0.0 ? t : -t, v.y >= 0.0 ? t : -t));
}

vec3 decode_octahedron_uint(uint p)
{
	vec2 v = unpackHalf2x16(p);

	vec3  n = vec3(v.x, v.y, 1.0 - abs(v.x) - abs(v.y));
    float t = sat1(-n.z);
    n.xy   += vec2(n.x >= 0.0 ? -t : t, n.y >= 0.0 ? -t : t);

    return normalize(n);
}

// conversions

//Source: https://github.com/tobspr/GLSL-Color-Spaces/blob/master/ColorSpaces.inc.glsl
const float SRGB_ALPHA = 0.055;
float linear2srgb(float x)
{
	if(x <= 0.0031308)
		return 12.92 * x;
	else
		return(1. + SRGB_ALPHA) * pow(x, 1.0 / 2.4) - SRGB_ALPHA;
}
vec3 rgb2srgb(vec3 c)
{
	return vec3(
		linear2srgb(c.r),
		linear2srgb(c.g),
		linear2srgb(c.b)
	);
}

float srgb2linear(float x)
{
	if(x <= 0.04045)
		return x / 12.92;
	else
		return pow((x + SRGB_ALPHA) / (1.0 + SRGB_ALPHA), 2.4);
}

vec3 srgb2rgb(vec3 c)
{
	return vec3(
		srgb2linear(c.r),
		srgb2linear(c.g),
		srgb2linear(c.b)
	);
}

vec3 rgb2ycocg(vec3 RGB)
{
    vec3 o;
    o.x =  0.25 * RGB.r + 0.5 * RGB.g + 0.25 * RGB.b;
    o.y =   0.5 * RGB.r - 0.5 * RGB.b;
    o.z = -0.25 * RGB.r + 0.5 * RGB.g - 0.25 * RGB.b;

	o.yz += (0.5 * 256.0 / 255.0);

    return o;
}

vec3 ycocg2rgb(vec3 YCoCg)
{
	YCoCg.yz = YCoCg.yz - (0.5 * 256.0 / 255.0);

    vec3 o;
    o.r = YCoCg.x + YCoCg.y - YCoCg.z;
    o.g = YCoCg.x + YCoCg.z;
    o.b = YCoCg.x - YCoCg.y - YCoCg.z;
    return o;
}

const mat3 yiq_mat = mat3
(
    0.2989, 0.5959, 0.2115,
    0.5870, -0.2744, -0.5229,
    0.1140, -0.3216, 0.3114
);

vec3 rgb2yiq(vec3 col)
{
    return yiq_mat * col;
}

const mat3 yiq2rgb_mat = mat3
(
    1.0, 1.0, 1.0,
    0.956, -0.2720, -1.1060,
    0.6210, -0.6474, 1.7046
);

vec3 yiq2rgb(vec3 yiq)
{
    return yiq2rgb_mat * yiq;
}

// M matrix, for encoding
const mat3 logLuvM = mat3(
    0.2209, 0.3390, 0.4184,
    0.1138, 0.6780, 0.7319,
    0.0102, 0.1130, 0.2969);

// Inverse M matrix, for decoding
const mat3 logLuvInvM = mat3(
    6.0013,    -2.700,    -1.7995,
    -1.332,    3.1029,    -5.7720,
    .3007,    -1.088,    5.6268);   

// transforms
vec3 transform44(mat4 m, vec3 a) // transform a vec3 with w = 1
{
	return a.x * m[0].xyz + (a.y * m[1].xyz + (a.z * m[2].xyz + m[3].xyz));
}

// misc
float Schlick(float k, float costh)
{
    return (1.0 - k * k) / (4.0 * 3.141592 * pow(1.0 - k * costh, 2.0));
}

float simplePhase(vec3 viewDir, vec3 lightDir, float anisotropy)
{
	//return textureLod(dithertex, vec2(anisotropy, dot(lightDir.xyz, viewDir) * 0.5 + 0.5), 0.0).r;
	float k = anisotropy;
	float c = 1.0 - k * dot(lightDir.xyz, viewDir.xyz);
	return (1.0 - k * k) * fastRcpNR0(c * c);
}

#endif
