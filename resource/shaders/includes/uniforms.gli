// uniforms and uniform buffers

#include "defines.gli"

#ifndef UNIFORMS_H
#define UNIFORMS_H

// todo: move me
uniform mat4 modelMatrix;
uniform mat4 projMatrix;
uniform mat4 viewMatrix;

uniform int lightMode;
uniform int geoMode;
uniform int blend_mode;
//uniform int ditherMode;

uniform int aoFlags;
uniform vec3 ambientColor;
uniform vec4 ambientSG[AMBIENT_LOBES];
uniform vec4 ambientCenter;
uniform uint ambientNumSG; // get around loop unrolling

// Shared uniforms across batch calls and render passes
layout(std140) uniform sharedBlock
{
	vec4  ambientSGBasis[AMBIENT_LOBES];

	vec4  mipDistances;

	float timeSeconds;
	float light_mult;
	float invlightMult;
	float pad;
	vec2  iResolution;

	vec2  clusterTileSizes;
	vec2  clusterScaleBias;
	vec2  pad1;
};

// Fog state
layout(std140) uniform fogBlock
{
	vec4  fogColor;
	int   fogEnabled;
	float fogStart;
	float fogEnd;
	float fogAnisotropy;
	vec4  fogLightDir;
};

// Texture state
// todo: TMUs
layout(std140) uniform textureBlock
{
	int   tex_mode;
	int   uv_mode;
	int   texgen;
	int   numMips;

	vec2 texsize;
	ivec2 itexsize;

	vec4 uv_offset[4];

	vec4 texgen_params;

	vec4 padding1;
};

// Material state
layout(std140) uniform materialBlock
{	
	vec4 fillColor;
	vec4 albedoFactor;
	vec4 emissiveFactor;
	vec4 specularFactor;

	float displacement_factor;
	float roughnessFactor;
	float texPad1, texPad2;
};

// Global light buffer
struct light
{
	vec4  position;
	vec4  direction_intensity;

	vec4 color;

	float radiusSqr;
	uint lux_intensity;
	float invRadius;
	uint pad1;
	
	int   type;
	float falloffMin;
	float falloffMax;
	float lux;
	
	float angleX;
	float cosAngleX;
	float angleY;
	float cosAngleY;
};

layout(std140) uniform lightBlock
{
	uint firstLight;
	uint numLights;
	uint lightPad0, lightPad1;
	light lights[CLUSTER_MAX_LIGHTS];
};

// Global occluder buffer
struct occluder
{
	vec4 position;
	float invRadius;
	float pad0, pad1, pad2;
};

layout(std140) uniform occluderBlock
{
	uint firstOccluder;
	uint numOccluders;
	uint occluderPad0, occluderPad1;
	occluder occluders[CLUSTER_MAX_OCCLUDERS];
};

// Global deceal buffer
struct decal
{
	mat4  decalMatrix;
	mat4  invDecalMatrix;
	vec4  uvScaleBias;
	vec4  posRad;
	vec4  color;
	uint  flags;
	float angleFade;
	float padding0;
	float padding1;
};

layout(std140) uniform decalBlock
{
	uint  firstDecal;
	uint  numDecals;
	uint  decalPad0, decalPad1;
	decal decals[CLUSTER_MAX_DECALS];
};

// Shader buffer
layout(std140) uniform shaderBlock
{	
	float shaderVersion;
	uint  shaderPadding0, shaderPadding1;
	uint  shaderInstructionCount;
	uvec4 shaderInstructions[32];
};

// Shader constants buffer
layout(std140) uniform shaderConstantsBlock
{
	vec4 shaderConstants[8];
};


float linearize_depth(float d)
{
	float znear = -projMatrix[3].z / (projMatrix[1].z + 1.0);
	float zfar  = -projMatrix[3].z / (projMatrix[1].z - 1.0);

	float z_n = 2.0 * d - 1.0;
    return 2.0 * znear * zfar / (zfar + znear - z_n * (zfar - znear));
}

#endif
