#include "globals.h"

#include "General/stdStrTable.h"
#include "Primitives/rdModel3.h"
#include "Primitives/rdVector.h"
#include "Primitives/rdMatrix.h"
#include "Raster/rdFace.h"
#include "Raster/rdCache.h"
#include "Engine/rdKeyframe.h"
#include "Engine/sithRender.h"
#include "World/sithWorld.h"
#include "World/sithSector.h"
#include "World/sithThing.h"

#include "jk.h"

#ifdef NO_JK_MMAP
// Vars
[[[cog
    import cog

    addrs = []

    f = open(symbols_fpath, "r")
    for line in f.readlines():
        if "//" in line:
            line = line.split("//")[0]
        if "#" in line:
            line = line.split("#")[0]
        parts = line.replace("\n", "").replace("\r", "").split(" ")
        if len(parts) < 3:
            continue
        
        name = parts[0]
        addr = parts[1]
        c_type = " ".join(parts[2:])
        c_type_post = ""
        c_val = "";

        if addr in addrs:
            cog.outl("aaaaaaaa duplicate addr %s" % addr)
        else:
            addrs += [addr]
        
        if "=" in c_type:
            c_val = c_type.split("=")[1]
            c_type = c_type.split("=")[0]
        
        if c_type == "func":
            continue
        
        if c_val == "":
            if c_type == "int":
                c_val = "0"
            elif c_type == "float":
                c_val = "0.0f"
            elif c_type == "double":
                c_val = "0.0f"
            elif "*" in c_type and "[" not in c_type:
                c_val = "NULL"
            else:
                c_val = "{0}"
        
        if "[" in c_type:
            s = c_type.split("[")
            c_type = s[0]
            c_type_post = "[" + s[1] 
        
        cog.outl("%s %s%s = %s;" % (c_type, name, c_type_post, c_val))

]]]
[[[end]]]
#endif

void OpenJKDF2_Globals_Reset()
{
// Vars
[[[cog
    import cog

    addrs = []

    f = open(symbols_fpath, "r")
    for line in f.readlines():
        if "//" in line:
            line = line.split("//")[0]
        if "#" in line:
            line = line.split("#")[0]
        parts = line.replace("\n", "").replace("\r", "").split(" ")
        if len(parts) < 3:
            continue
        
        name = parts[0]
        addr = parts[1]
        c_type = " ".join(parts[2:])
        c_type_post = ""
        c_val = "";

        if addr in addrs:
            cog.outl("aaaaaaaa duplicate addr %s" % addr)
        else:
            addrs += [addr]
        
        if "=" in c_type:
            c_val = c_type.split("=")[1]
            c_type = c_type.split("=")[0]
        
        if c_type == "func":
            continue
        
        if c_val == "":
            if c_type == "int":
                c_val = "0"
            elif c_type == "float":
                c_val = "0.0f"
            elif c_type == "double":
                c_val = "0.0f"
            elif "*" in c_type and "[" not in c_type:
                c_val = "NULL"
            else:
                c_val = "{0}"
        
        if "[" in c_type:
            s = c_type.split("[")
            c_type = s[0]
            c_type_post = "[" + s[1] 
        
        if c_val == "NULL" or c_val == "0" or c_val == "0.0f":
            cog.outl("%s = %s;" % (name, c_val))
        if c_val == "{0}":
            cog.outl("_memset(&%s, 0, sizeof(%s));" % (name, name))
        else:
            cog.outl("%s __%s_origValue%s = %s;" % (c_type, name, c_type_post, c_val))
            cog.outl("_memcpy(&%s, &__%s_origValue, sizeof(%s));" % (name, name, name))

]]]
[[[end]]]
}

[[[cog
    import cog
    import glob
    import os
    from pathlib import Path
   
    embed_files = glob.glob(str(Path(project_root) / "resource" / "ui" / "bm" / "*.bm"))
    for fpath in embed_files:
        fpath_ = fpath.replace(str(Path(project_root)) + os.sep, "").replace("\\", "/").replace("resource/", "")
        fname = os.path.basename(fpath)
        contents = open(fpath, "rb").read()
        cog.outl("const char %s[%d] = {" % (os.path.splitext(fname)[0] + "data", len(contents),))
        for byte in contents:
            cog.out("0x%x," % byte)
        cog.outl("};")

    embed_files += glob.glob(str(Path(project_root) / "resource" / "shaders" / "*.glsl"))
    embed_files += glob.glob(str(Path(project_root) / "resource" / "shaders" / "world" / "*.glsl"))
    embed_files += glob.glob(str(Path(project_root) / "resource" / "shaders" / "deferred" / "*.glsl"))
    embed_files += glob.glob(str(Path(project_root) / "resource" / "shaders" / "postfx" / "*.glsl"))
    embed_files += glob.glob(str(Path(project_root) / "resource" / "shaders" / "includes" / "*.gli"))
    embed_files += glob.glob(str(Path(project_root) / "resource" / "ssl" / "*.pem"))
    embed_files += glob.glob(str(Path(project_root) / "resource" / "ui" / "*.uni"))
    cog.outl("const size_t embeddedResource_aFiles_num = %d;" % (len(embed_files),))
    cog.outl("const embeddedResource_t embeddedResource_aFiles[%d] = {" % (len(embed_files),))

    for fpath in embed_files:
        fpath_ = fpath.replace(str(Path(project_root)) + os.sep, "").replace("\\", "/").replace("resource/", "")
        fname = os.path.basename(fpath)
        fext = os.path.splitext(fpath_)[-1].lower()
        if fext != ".bm":
            contents = open(fpath, "r").read()
            cog.outl("{\"%s\", " % (fpath_,))
            for line in contents.split("\n"):
                cog.outl("\"%s\"" % (line.replace("\"", "\\\"") + "\\n"))
            cog.outl(", 0x%x}," % (len(contents),))
        else:
            contents = open(fpath, "rb").read()
            cog.outl("{\"%s\", " % (fpath_,))
            cog.out("%s" % (os.path.splitext(fname)[0] + "data"))
            cog.outl(", 0x%x}," % (len(contents),))

    cog.outl("};")

]]]
[[[end]]]