// lighting functionality

import "defines.gli"
import "uniforms.gli"
import "math.gli"
import "clustering.gli"
import "sg.gli"
import "textures.gli"
import "attr.gli"
import "reg.gli"

#ifndef LIGHTING_H
#define LIGHTING_H

#define RD_LIGHT_POINTLIGHT 2
#define RD_LIGHT_SPOTLIGHT  3
#define RD_LIGHT_RECTANGLE  4

#define RD_FALLOFF_DEFAULT   0
#define RD_FALLOFF_QUADRATIC 1
#define RD_FALLOFF_JED       2

#define EARLY_THRESHOLD (1.0/255.0)

// the long streaky lobe of GGX/blinn-phong is just way nicer than phong...
//#define GGX

struct light_result
{
	// r11g11b10f accumulators
	uint diffuse;
	uint specular;

	// debug
	float cost;
};

uint calc_spec_c(float a)
{
#ifdef GGX	
	vec2 coeffs = vec2(a * a, a * a - 1.0);// a * float(4.0) + float(2.0));
#else
	// phong
	float rcp_a2 = 1.0 / (a * a);
	vec2 coeffs = vec2(rcp_a2 / M_PI, 0.72134752 * rcp_a2 + 0.39674113);
#endif
	return packHalf2x16(coeffs);
}

// https://www.unrealengine.com/en-US/blog/physically-based-shading-on-mobile
vec3 env_brdf_approx( vec3 f0, float roughness, float ndotv )
{
	const vec4 c0 = vec4( -1, -0.0275, -0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, -0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( -9.28 * ndotv ) ) * r.x + r.y;
	vec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;
	return f0 * AB.x + AB.y;
}

float env_brdf_nonmetal( float roughness, float ndotv )
{
	// Same as env_brdf_approx( 0.04, roughness, ndotv )
	const vec2 c0 = vec2( -1, -0.0275 );
	const vec2 c1 = vec2( 1, 0.0425 );
	vec2 r = roughness * c0 + c1;
	return min( r.x * r.x, exp2( -9.28 * ndotv ) ) * r.x + r.y;
}

// https://community.arm.com/cfs-file/__key/communityserver-blogs-components-weblogfiles/00-00-00-20-66/siggraph2015_2D00_mmg_2D00_renaldas_2D00_slides.pdf
vec3 env_brdf_refit(vec3 f0, float roughness, float ndotv)
{
	float r = 1.0 - max(roughness, ndotv);
	float r2 = r * r;
	return r * r2 + f0;
}

vec3 env_brdf( vec3 f0, float roughness, float ndotv )
{
	return env_brdf_refit(f0, roughness, ndotv);
}

vec3 fresnel_approx(vec3 f0, float costh)
{
	return f0 + (1.0 - f0) * exp2(-8.35 * costh);
}

float halfLambert(vec3 normal, vec3 lvec)
{
	//return saturate(dot(normal, lvec));
	float ndotl = dot(normal, lvec) * 0.5 + 0.5;
	return saturate(ndotl * ndotl);
}

bool broadcast(bool value)
{
#ifdef GL_KHR_shader_subgroup_vote
	return subgroupAll(value);
#else
	return value;
#endif
}

struct light_data
{
	vec3   lvec;
	float  rcpLen;
	float  len;
	float  lenSq;
};

light_data calc_light_data(vec3 light, vec3 pos)
{
	// normalize the light factoring out common subexpressions
	light_data data;
	data.lvec   = light.xyz - pos.xyz;
	data.lenSq  = dot(data.lvec, data.lvec);
	data.rcpLen = fastRcpSqrtNR1(data.lenSq);
	data.len    = data.rcpLen * data.lenSq;
	data.lvec   = data.lvec * data.rcpLen;
	return data;
}

light_data calc_point_light_data(uint light_index, light_input params)
{
	const vec3 lightPos = lights[light_index].position.xyz;
	vec3 viewPos = readVPOS().xyz;
	return calc_light_data(lightPos, viewPos);
}

vec3 snapDisc(vec3 q, vec3 dpos, float drad, vec3 ddir)
{
    vec3 to = q - dpos;
    to -= dot(to, ddir) * ddir;
    return saturate(drad / length(to + 1e-7)) * to + dpos;
}

light_data calc_spot_light_data(uint light_index, light_input params)
{
	const float discRadius = lights[light_index].right.w * 0.5; 
	const  vec3 center     = lights[light_index].position.xyz;
	const  vec3 front      = lights[light_index].direction_intensity.xyz;

	vec3 viewPos      = readVPOS().xyz;
	vec3 closestPoint = center;

	if (discRadius > 0.0)
	{
		vec3 toCenter = viewPos - center;
		vec3 projection = viewPos - dot(toCenter, front) * front;
		vec3 fromCenter = projection - center;
		float dist2 = dot(fromCenter, fromCenter);
		if (dist2 > discRadius * discRadius)
		{
			fromCenter *= discRadius / sqrt(dist2);
			closestPoint = center + fromCenter;
		}
		else
		{
			closestPoint = projection;
		}
	}	
	return calc_light_data(closestPoint, viewPos);
}

light_data calc_rect_light_data(uint light_index, light_input params)
{
	// slightly smaller to give some padding
	const vec2 halfSize = vec2(lights[light_index].right.w, lights[light_index].up.w) * 0.5;
		
	const vec3 center = lights[light_index].position.xyz;
	const vec3 front  = lights[light_index].direction_intensity.xyz;
	const vec3 right  = lights[light_index].right.xyz;
	const vec3 up     = lights[light_index].up.xyz;

	vec3 viewPos    = readVPOS().xyz;
	vec3 projection = -dot(front, viewPos - center) * front + viewPos;
	vec3 dir        = projection.xyz - center.xyz;
	
	vec2 diagonal           = vec2(dot(dir, right), dot(dir, up));
	vec2 nearest2D          = clamp(diagonal.xy, -halfSize, halfSize);
	vec3 nearestPointInside = center.xyz + (right.xyz * nearest2D.x + (up.xyz * nearest2D.y));
		
	return calc_light_data(nearestPointInside, viewPos);
}

float calc_light_intensity(uint light_index, light_data data)
{
	float intensity = lights[light_index].direction_intensity.w;
	if (lights[light_index].type > RD_LIGHT_POINTLIGHT)
	{
		const vec3 lightDir = lights[light_index].direction_intensity.xyz;
		if(lights[light_index].type == RD_LIGHT_RECTANGLE)
		{
			// wrap the facing contribution so that we get a little bit of self illumination
			intensity *= saturate(dot(lightDir, -data.lvec));
		}
		else if (lights[light_index].type == RD_LIGHT_SPOTLIGHT)
		{
			const float cosAngleY = lights[light_index].cosAngleY;
			const float cosAngleX = lights[light_index].cosAngleX;
			const float lux       = lights[light_index].lux;

			float angle = dot(-lightDir, data.lvec);

			if (broadcast(angle <= cosAngleY))
				return 0.0;

			if (angle < cosAngleX)
				intensity *= saturate(-(cosAngleX - angle) * lux + 1.0);
		}
	}
	return intensity;
}

float calc_quadratic_atten(uint light_index, light_data data)
{
	const float sqInv = lights[light_index].invFalloff * lights[light_index].invFalloff;

	//float falloff = saturate(-data.lenSq * sqInv + 1.0);
	//return falloff * falloff;

	float s = saturate(data.lenSq * sqInv);
	float is = 1.0 - s;
		
	return (is * is) * fastRcpNR0(lights[light_index].falloffMin * s + 1.0);
}

float calc_jed_atten(uint light_index, light_data data)
{
	const float invFalloff = lights[light_index].invFalloff;
	float atten = -data.len * invFalloff + 1.0;
	return atten * atten;
}

// this atten is subtractive, not multiplicative
float calc_default_atten(uint light_index, light_data data)
{
	// note it depends on scalar value matching whatever was used to calculate the intensity, it seems
	const float scalar = 0.4; // todo: needs to come from rdCamera_pCurCamera->attenuationMin
	return scalar * data.len;

	//if ( len > lights[light_index].falloffMax ) // from jones
    //{
    //    float drad  = lights[light_index].falloffMin - lights[light_index].falloffMax;
    //    float atten = (data.len - lights[light_index].falloffMax) / drad;
	//	return atten;
    //}
}

void calc_point_light(inout light_result result, uint light_index, light_input params)
{
	light_data data;
	switch (lights[light_index].type)
	{
	case RD_LIGHT_RECTANGLE:
		data = calc_rect_light_data(light_index, params);
		break;
	case RD_LIGHT_SPOTLIGHT:
		data = calc_spot_light_data(light_index, params);
		break;
	default:
		data = calc_point_light_data(light_index, params);
		break;
	}

	if (broadcast(data.lenSq >= lights[light_index].radiusSqr))
		return;

	vec3 normal = unpackSnorm4x8(params.normal).xyz;
	float ndotl = halfLambert( normal.xyz, data.lvec.xyz );
	if (broadcast(ndotl < EARLY_THRESHOLD))
		return;

	float intensity = calc_light_intensity(light_index, data);	
	if (broadcast(intensity < EARLY_THRESHOLD))
		return;

	// attenuation
	switch(lights[light_index].falloffType)
	{
	case RD_FALLOFF_QUADRATIC:
		intensity *= calc_quadratic_atten(light_index, data);
		break;
	case RD_FALLOFF_JED:
		intensity *= calc_jed_atten(light_index, data);
		break;
	default:
		intensity -= calc_default_atten(light_index, data);
		break;
	}

	if (broadcast(intensity < EARLY_THRESHOLD))
		return;

	float lightMagnitude = max(0.0, ndotl * intensity);
	//float signedMagnitude = lightMagnitude;
	//lightMagnitude = max(lightMagnitude, float(0.0)) * intensity;

	vec3 cd = vec3(lightMagnitude);
	//if (lightMode == 5)
	//{
	//	// https://www.shadertoy.com/view/dltGWl
	//	// exp -> exp2, 3.0 * 1.4427 = 4.3281
	//	vec3 sss = exp2((-4.3281 * abs(signedMagnitude)) / (fillColor.rgb + 0.001));
	//	cd.xyz += fillColor.rgb * sss * (0.2 * intensity);
	//}
	//else
	//if(signedMagnitude < EARLY_THRESHOLD)
	//{
	//	return;
	//}

	vec3 lightColor = lights[light_index].color.rgb;
	if (lights[light_index].type > 0)
	{
	 	result.diffuse = packF2x11_1x10(cd.rgb * lightColor.rgb + (unpackF2x11_1x10(result.diffuse)));
		//result.diffuse = cd.rgb * lightColor.rgb + result.diffuse;
	}
	else
	{
		lightColor *= unpackUnorm4x8(params.tint).rgb;
	}

	result.cost += 1.0;

#ifdef WORLD
	if (lightMode > 3)
#endif
	{
		vec2 coeffs = unpackHalf2x16(params.spec_c);
	#ifdef GGX	
		// Unity "Optimizing PBR"
		// https://community.arm.com/cfs-file/__key/communityserver-blogs-components-weblogfiles/00-00-00-20-66/siggraph2015_2D00_mmg_2D00_renaldas_2D00_slides.pdf
		// approximated microfacet GGX lobe, fresnel and visibility approximated with ldoth, spec color applied at the end
		//vec3  view  = unpackSnorm4x8(params.view).xyz;
		//vec3  h     = normalize(lvec + view);
		//float ndoth = clamp(dot(h, normal), float(0.0), float(1.0));
		//float ldoth = clamp(dot(h, lvec), float(0.0), float(1.0));
		//
		//float d       = (ndoth * ndoth) * (coeffs.x - float(1.0)) + float(1.00001);
		//      d       = coeffs.x / ((d * d) * max(float(0.1), ldoth * ldoth) * coeffs.y);

		vec3 reflected = unpackSnorm4x8(params.reflected).xyz;

		float rdotv = dot(reflected, data.lvec);
		float     d = (rdotv * rdotv) * coeffs.y + 1.00001;
				  d = coeffs.x * fastRcpNR1(d * d);
	#else
		// "Physically Based Shading on Mobile"
		// https://www.unrealengine.com/en-US/blog/physically-based-shading-on-mobile
		// approximated energy conserving phong lobe, fresnel and spec color must be applied at the end with env_brdf
		vec3 reflected = unpackSnorm4x8(params.reflected).xyz;

		float rdotv  = dot(reflected, data.lvec);
		float d      = coeffs.x * fastExp2( coeffs.y * rdotv + (-coeffs.y) );
	#endif

		result.specular = packF2x11_1x10((lightMagnitude * d) * lightColor.rgb + (unpackF2x11_1x10(result.specular)));
		//result.specular = lightColor.rgb * vec3(lightMagnitude * d) + result.specular;
		result.cost += 0.25;
	}
}

void calculate_lighting(inout light_result result, light_input params, uint cluster)
{
	//for (int i = 0; i < numLights; ++i)
	//	calc_point_light(result, i, params);

	uint s_first_item   = firstLight;
	uint s_last_item    = s_first_item + numLights - 1u;
	uint s_first_bucket = s_first_item >> 5u;
	uint s_last_bucket  = min(s_last_item >> 5u, max(0u, CLUSTER_BUCKETS_PER_CLUSTER - 1u));
	for (uint s_bucket  = s_first_bucket; s_bucket <= s_last_bucket; ++s_bucket)
	{
		uint bucket_bits = uint(texelFetch(clusterBuffer, int(cluster + s_bucket)).x);
		uint s_bucket_bits = scalarize_buckets_bits(bucket_bits);
		while (s_bucket_bits != 0u)
		{
			uint s_bucket_bit_index = findLSB(s_bucket_bits);
			uint s_light_index = (s_bucket << 5u) + s_bucket_bit_index;
			s_bucket_bits ^= (1u << s_bucket_bit_index);

			if (s_light_index >= s_first_item && s_light_index <= s_last_item)
			{
				calc_point_light(result, s_light_index, params);
				
				//if (result.diffuse >= maxLight)
				//{
				//	s_bucket = CLUSTER_BUCKETS_PER_CLUSTER;
				//	break;
				//}
			}
			else if (s_light_index > s_last_item)
			{
				s_bucket = CLUSTER_BUCKETS_PER_CLUSTER;
				break;
			}
		}
	}
}

#endif
