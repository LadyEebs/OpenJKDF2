// simple dx8 style microcode shader VM
// I'm seeing big performance gains from amd driver 22.7.1 and higher (the release notes indicate boosts in minecraft, related?)
// unfortunately those don't work with renderdoc's assembly view, ugh...

#include "defines.gli"
#include "uniforms.gli"
#include "math.gli"
#include "lighting.gli"
#include "textures.gli"
#include "decals.gli"
#include "occluders.gli"
#include "isa.gli"
#include "reg.gli"
#include "attr.gli"

#ifndef VM_H
#define VM_H

#ifdef FRAGMENT_SHADER

void run_vm()
{
	for (uint s_pc = 0; s_pc < shaderInstructionCount; ++s_pc)
	{
		vm_instr s_ir;
		s_decode_instr(s_ir, shaderInstructions[s_pc]);

		vec4 result;
		switch(s_ir.opcode)
		{					
		case OP_TEX:
			result = load_tex(
				textures[s_ir.src0.addr],
				read_texcoord_reg(s_ir.src1.addr),
				fetch_vtx_lodbias()
			);
			break;

		case OP_TEXDUDV:
			result = load_tex(
				textures[s_ir.src0.addr],
				read_texcoord_reg(s_ir.src1.addr) + read_src2(s_ir).xy,
				fetch_vtx_lodbias()
			);
			break;
		
		case OP_OPM:
			result.xy = parallax(
						textures[s_ir.src0.addr],
						read_texcoord_reg(s_ir.src1.addr),
						decodeHemiUnitVector(vdir)).xy;
			result.zw = vec2(0.0);
			break;

		case OP_MOV:
			result = sat4( read_src0(s_ir) );
			break;

		case OP_ADD:
			result = sat4( read_src0(s_ir) + read_src1(s_ir) );
			break;

		case OP_SUB:
			result = sat4( read_src0(s_ir) - read_src1(s_ir) );
			break;

		case OP_MAC:
			result = sat4( read_src0(s_ir) * read_src1(s_ir) + read_dest(s_ir) );
			break;

		case OP_MAD:
			result = sat4( read_src0(s_ir) * read_src1(s_ir) + read_src2(s_ir) );
			break;

		case OP_MUL:
			result = sat4( read_src0(s_ir) * read_src1(s_ir) );
			break;
			
		case OP_MAX:
			result = max( read_src0(s_ir), read_src1(s_ir) );
			break;
		
		case OP_MIN:
			result = min( read_src0(s_ir), read_src1(s_ir) );
			break;

		case OP_MIX:
			result = sat4(mix( read_src0(s_ir), read_src1(s_ir), read_src2(s_ir) ));
			break;

		case OP_CMP:
			result = mix( read_src2(s_ir), read_src1(s_ir), greaterThan( read_src0(s_ir), vec4(0.0) ));
			break;

		case OP_CND:
			result = mix( read_src2(s_ir), read_src1(s_ir), greaterThan( read_src0(s_ir), vec4(0.5) ));
			break;

		case OP_DP2:
			result = vec4(dot( read_src0(s_ir).xy, read_src1(s_ir).xy ));
			break;

		case OP_DP3:
			result = vec4(dot( read_src0(s_ir).xyz, read_src1(s_ir).xyz ));
			break;

		case OP_DP4:
			result = vec4(dot( read_src0(s_ir), read_src1(s_ir) ));
			break;

		case OP_POW:
			if (s_ir.prec)
				result = pow( read_src0(s_ir), read_src1(s_ir) );
			else
				result = fastPow( read_src0(s_ir), read_src1(s_ir) );
			break;

		case OP_EXP2:
			if (s_ir.prec)
				result = exp2( read_src0(s_ir) );
			else
				result = fastExp2( read_src1(s_ir) );
			break;

		case OP_LOG2:
			if (s_ir.prec)
				result = log2( read_src0(s_ir) );
			else
				result = fastLog2( read_src1(s_ir) );
			break;

		case OP_DIV:
			if (s_ir.prec)
				result = sat4( read_src0(s_ir) / read_src1(s_ir) );
			else
				result = sat4( read_src0(s_ir) * fastRcpNR0(read_src1(s_ir)) );
			break;


		default:
		case OP_NOP:
			return;
		}

		write_reg(s_ir, result);
	}
}

#endif

#endif
