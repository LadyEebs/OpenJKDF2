// cluster system

import "uniforms.gli"
import "textures.gli"

#ifndef CLUSTERING_H
#define CLUSTERING_H

layout(binding = TEX_SLOT_CLUSTER_BUFFER) uniform usamplerBuffer clusterBuffer;

struct light_input
{
	uvec2 pos;		 // 16:16:16 view space pos
	uint  normal;	 // 8:8:8 signed (todo: this is faster than octa but there's wasted bits)
	uint  view;		 // 16:16 octahedral view vector (ggx)
	uint  reflected; // 16:16 octahedral reflection vector (phong)
	uint  spec_c;    // 16:16 specular coeffs
	uint  tint;      // tint rgba
};

uint get_cluster_z_index(float screen_depth)
{
	return uint(max(log(screen_depth) * clusterScaleBias.x + clusterScaleBias.y, 0.0));
}

uint compute_cluster_index(vec2 pixel_pos, float screen_depth)
{
	uint z_index = get_cluster_z_index(screen_depth);
	uvec3 indices = uvec3(uvec2(pixel_pos.xy / clusterTileSizes.xy), z_index);
	 indices = clamp(indices, uvec3(0), uvec3(CLUSTER_GRID_SIZE_X, CLUSTER_GRID_SIZE_Y, CLUSTER_GRID_SIZE_Z)-1);
  
	uint cluster = (indices.z * CLUSTER_GRID_SIZE_X) * CLUSTER_GRID_SIZE_Y + (indices.y * CLUSTER_GRID_SIZE_X + indices.x);
	return cluster;
}

uint scalarize_buckets_bits(uint bucket_bits)
{
#if defined(GL_KHR_shader_subgroup_ballot) && defined(GL_KHR_shader_subgroup_arithmetic)
	bucket_bits = subgroupBroadcastFirst(subgroupOr(bucket_bits));
#endif
	return bucket_bits;
}

#endif