// simple dx8 style microcode shader VM
// I'm seeing big performance gains from amd driver 22.7.1 and higher (the release notes indicate boosts in minecraft, related?)
// unfortunately those don't work with renderdoc's assembly view, ugh...

#include "defines.gli"
#include "uniforms.gli"
#include "math.gli"
#include "lighting.gli"
#include "textures.gli"
#include "decals.gli"
#include "occluders.gli"
#include "isa.gli"
#include "reg.gli"

#ifndef VM_H
#define VM_H

#ifdef FRAGMENT_SHADER

void run_vm()
{
	for (uint s_pc = 0; s_pc < shaderInstructionCount; ++s_pc)
	{
		vm_instr s_instr;
		s_decode_instr(s_instr, shaderInstructions[s_pc]);

		vec4 result;
		switch(s_instr.opcode)
		{					
		case OP_TEX:
			result = load_tex(
				textures[s_instr.src0.idx_imm],
				read_texcoord_reg(s_instr.src1.idx_imm),
				unpackHalf2x16(c_l).y
			).xyzw;
			break;

		case OP_TEXDUDV:
			result = load_tex(
				textures[s_instr.src0.idx_imm],
				read_texcoord_reg(s_instr.src1.idx_imm) + read_src(s_instr.src2).xy,
				unpackHalf2x16(c_l).y
			).xyzw;
			break;
		
		case OP_OPM:
			result.xy = parallax(
						textures[s_instr.src0.idx_imm],
						read_texcoord_reg(s_instr.src1.idx_imm),
						decodeHemiUnitVector(vdir)).xy;
			result.zw = vec2(0.0);
			break;

		case OP_MOV:
			result = sat4( read_src(s_instr.src0) );
			break;

		case OP_ADD:
			result = sat4( read_src(s_instr.src0) + read_src(s_instr.src1) );
			break;

		case OP_SUB:
			result = sat4( read_src(s_instr.src0) - read_src(s_instr.src1) );
			break;

		case OP_MAC:
			result = sat4( read_src(s_instr.src0) * read_src(s_instr.src1) + read_dest(s_instr.dst) );
			break;

		case OP_MAD:
			result = sat4( read_src(s_instr.src0) * read_src(s_instr.src1) + read_src(s_instr.src2) );
			break;

		case OP_MUL:
			result = sat4( read_src(s_instr.src0) * read_src(s_instr.src1) );
			break;
			
		case OP_MAX:
			result = max( read_src(s_instr.src0), read_src(s_instr.src1) );
			break;
		
		case OP_MIN:
			result = min( read_src(s_instr.src0), read_src(s_instr.src1) );
			break;

		case OP_MIX:
			result = sat4(mix( read_src(s_instr.src0), read_src(s_instr.src1), read_src(s_instr.src2) ));
			break;

		case OP_CMP:
			result = mix( read_src(s_instr.src2), read_src(s_instr.src1), greaterThan( read_src(s_instr.src0), vec4(0.0) ));
			break;

		case OP_CND:
			result = mix( read_src(s_instr.src2), read_src(s_instr.src1), greaterThan( read_src(s_instr.src0), vec4(0.5) ));
			break;

		case OP_DIV:
			result = sat4( read_src(s_instr.src0) / read_src(s_instr.src1) );
			break;

		case OP_DP2:
			result = vec4(dot( read_src(s_instr.src0).xy, read_src(s_instr.src1).xy ));
			break;

		case OP_DP3:
			result = vec4(dot( read_src(s_instr.src0).xyz, read_src(s_instr.src1).xyz ));
			break;

		case OP_DP4:
			result = vec4(dot( read_src(s_instr.src0), read_src(s_instr.src1) ));
			break;

		case OP_POW:
			result = pow( read_src(s_instr.src0), read_src(s_instr.src1) );
			break;

		default:
		case OP_NOP:
			return;
		}

		if(s_instr.opcode != OP_OPM)
			write_reg(s_instr.dst, result);
	}
}

#endif

#endif
