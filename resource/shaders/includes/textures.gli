#ifndef TEXTURES_H
#define TEXTURES_H

// Textures
uniform sampler2D textures[4];

uniform sampler2D tex;
uniform sampler2D texEmiss;
uniform sampler2D worldPalette;
uniform sampler2D worldPaletteLights;
uniform sampler2D displacement_map;

uniform sampler2D ztex;
uniform sampler2D ssaotex;
uniform sampler2D refrtex;
uniform sampler2D cliptex;
uniform sampler2D dithertex;
uniform sampler2D diffuseLightTex;
uniform sampler1D blackbodyTex;

uint dither_value(uvec2 xy)
{
    uvec2 half_xy = (xy & 3u) >> 1u;
    uvec2 odd_xy  =  xy & 1u;

	// x4 and x2 can be modifiers on AMD, so group those together to reduce instruction count
    uint base   = (half_xy.y << 3u) + (half_xy.x << 2u); // coarse 2x2 grid pattern
    uint offset =  (odd_xy.x << 2u) + ( odd_xy.y << 1u); // fine 2x2 offset pattern

    return base + offset;
}

float dither_value_float(uvec2 xy)
{
    return float(dither_value(xy)) / 15.0;
}

float luminance(vec3 c_rgb)
{
    return dot(c_rgb, vec3(0.2125, 0.7154, 0.0721));
}

#ifdef FRAGMENT_SHADER

#if 0
vec4 tex_6x6(sampler2D s, vec2 uv)
{
	float mip = texQueryLod(s, uv);
	//mip += compute_mip_bias(f_coord.y);
	mip = min(mip, float(numMips - 1));

	ivec2 ires = textureSize( s, int(mip) );

	vec2 PixSize = 2.0 / vec2(ires.xy);
    
	// 6x6 downscale/upscale
    vec4 s0 = textureLod(s, vec2( 0.000000000, 0.000000000) * PixSize.xy + uv.xy, mip);
	vec4 s1 = textureLod(s, vec2( 0.604077935, 0.000000000) * PixSize.xy + uv.xy, mip);
	vec4 s2 = textureLod(s, vec2( 0.000000000, 0.604077935) * PixSize.xy + uv.xy, mip);
	vec4 s3 = textureLod(s, vec2(-0.604077935, 0.000000000) * PixSize.xy + uv.xy, mip);
	vec4 s4 = textureLod(s, vec2( 0.000000000,-0.604077935) * PixSize.xy + uv.xy, mip);		
	vec4 s5 = textureLod(s, vec2( 0.604077935, 0.604077935) * PixSize.xy + uv.xy, mip);
	vec4 s6 = textureLod(s, vec2(-0.604077935, 0.604077935) * PixSize.xy + uv.xy, mip);
	vec4 s7 = textureLod(s, vec2( 0.604077935,-0.604077935) * PixSize.xy + uv.xy, mip);
	vec4 s8 = textureLod(s, vec2(-0.604077935,-0.604077935) * PixSize.xy + uv.xy, mip);
		
	vec4 Color = s0 * 0.145904019;
	Color     += 0.11803490998 * (s1 + s2 + s3 + s4);
	Color     += 0.09548908532 * (s5 + s6 + s7 + s8);

	return Color;
}
#endif

mat3 construct_tbn(vec2 uv, vec3 pos)
{
    vec3 dp1  = dFdx(pos.xyz);
    vec3 dp2  = dFdy(pos.xyz);
    vec2 duv1 = dFdx(uv.xy);
    vec2 duv2 = dFdy(uv.xy);

	vec3 n = normalize(cross(dp1, dp2)); // todo: use f_normal?

    vec3 dp2perp = cross(dp2, n);
    vec3 dp1perp = cross(n, dp1);

    vec3 t = dp2perp * duv1.x + dp1perp * duv2.x;
    vec3 b = dp2perp * duv1.y + dp1perp * duv2.y;

    float invmax = inversesqrt(max(dot(t, t), dot(b, b)));
    return mat3(t * invmax, b * invmax, n);
}

float compute_mip_bias(float z_min)
{
	float mipmap_level = float(0.0);
	mipmap_level           = z_min < mipDistances.x ? mipmap_level : float(1.0);
	mipmap_level           = z_min < mipDistances.y ? mipmap_level : float(2.0);
	mipmap_level           = z_min < mipDistances.z ? mipmap_level : float(3.0);

	// dither the mip level
	//if(ditherMode == 1)
	//{
	//	const mat4 bayerIndex = mat4(
	//		vec4(00.0/16.0, 12.0/16.0, 03.0/16.0, 15.0/16.0),
	//		vec4(08.0/16.0, 04.0/16.0, 11.0/16.0, 07.0/16.0),
	//		vec4(02.0/16.0, 14.0/16.0, 01.0/16.0, 13.0/16.0),
	//		vec4(10.0/16.0, 06.0/16.0, 09.0/16.0, 05.0/16.0)
	//	);
	//	ivec2 coord = ivec2(gl_FragCoord.xy);
	//	mipmap_level += bayerIndex[coord.x & 3][coord.y & 3];
	//}

	return mipmap_level + float(mipDistances.w);
}

#if 0
float sampleSobel(in sampler2D s, in vec2 uv)
{
    float weight = 1.0;
	float f = textureLod(s, uv, 0.0).r;
    return f * weight - (weight * 0.5);
}

vec2 sobel(in sampler2D s, in vec2 uv)
{   
    vec2 offset = 1.0/texsize.xy * 1.0;
    float x = offset.x;
    float y = offset.y;
    
    // |-1  0  1|
    // |-2  0  2| 
    // |-1  0  1|
    
    float gX = 0.0;
    gX += -1.0 * sampleSobel(s, uv + vec2(-x, -y));
    gX += -2.0 * sampleSobel(s, uv + vec2(-x,  0));
    gX += -1.0 * sampleSobel(s, uv + vec2(-x, +y));
    gX += +1.0 * sampleSobel(s, uv + vec2(+x, -y));
    gX += +2.0 * sampleSobel(s, uv + vec2(+x,  0));
    gX += +1.0 * sampleSobel(s, uv + vec2(+x, +y));
    
    // |-1 -2 -1|
    // | 0  0  0| 
    // | 1  2  1|
    
    float gY = 0.0;
    gY += -1.0 * sampleSobel(s, uv + vec2(-x, -y));
    gY += -2.0 * sampleSobel(s, uv + vec2( 0, -y));
    gY += -1.0 * sampleSobel(s, uv + vec2(+x, -y));
    gY += +1.0 * sampleSobel(s, uv + vec2(-x, +y));
    gY += +2.0 * sampleSobel(s, uv + vec2( 0, +y));
    gY += +1.0 * sampleSobel(s, uv + vec2(+x, +y));
    
	return vec2(sqrt(gX * gX + gY * gY), atan(-gY, -gX));
}

vec4 bumpFromDepth(in sampler2D s, vec2 uv)
{
	//vec2 f = sobel(s, uv);
    //
    //vec2 gradientDirection = f.x * vec2(cos(f.y), sin(f.y));
    //vec3 normal = normalize(vec3(gradientDirection, 1.0));
	//
	//return vec4(normal, 0.0);

//	vec2 texelsize = 1. / texsize.xy;
//
//    float dx = 0.;
//    float dy = 0.;
//    
//    dx -= luminance(texture(s, vec2(uv.x - texelsize.x, uv.y - texelsize.y)).rgb) * 1.0;
//	dx -= luminance(texture(s, vec2(uv.x - texelsize.x, uv.y              )).rgb) * 2.0;
//	dx -= luminance(texture(s, vec2(uv.x - texelsize.x, uv.y + texelsize.y)).rgb) * 1.0;
//	dx += luminance(texture(s, vec2(uv.x + texelsize.x, uv.y - texelsize.y)).rgb) * 1.0;
//	dx += luminance(texture(s, vec2(uv.x + texelsize.x, uv.y              )).rgb) * 2.0;
//	dx += luminance(texture(s, vec2(uv.x + texelsize.x, uv.y + texelsize.y)).rgb) * 1.0;
//    
//    dy -= luminance(texture(s, vec2(uv.x - texelsize.x, uv.y - texelsize.y)).rgb) * 1.0;
//	dy -= luminance(texture(s, vec2(uv.x              , uv.y - texelsize.y)).rgb) * 2.0;
//	dy -= luminance(texture(s, vec2(uv.x + texelsize.x, uv.y - texelsize.y)).rgb) * 1.0;
//	dy += luminance(texture(s, vec2(uv.x - texelsize.x, uv.y + texelsize.y)).rgb) * 1.0;
//	dy += luminance(texture(s, vec2(uv.x              , uv.y + texelsize.y)).rgb) * 2.0;
//	dy += luminance(texture(s, vec2(uv.x + texelsize.x, uv.y + texelsize.y)).rgb) * 1.0;
//    
//    float nx = dx;
//    float ny = dy;
//    vec3 norm = vec3(dx, dy, sqrt(1.0 - dx*dx - dy*dy));
//
//	return vec4(normalize(norm), 0.0);

//	vec2 texelSize = 1.0 / texsize.xy;
//	float scale = 0.9;
//	float sampleDist = 1.0;
//
//	/*
//	[6][7][8]
//	[3][4][5]
//	[0][1][2]
//	*/
//	float ts = min(texelSize.x, texelSize.y);
//	float smps[9];
//
//	vec2 off = vec2(ts * sampleDist, -ts * sampleDist); // offsets
//	smps[0] = textureLod(s, uv + vec2(off.y, off.y), 0.0).g;
//	smps[1] = textureLod(s, uv + vec2(0, off.y), 0.0).g;
//	smps[2] = textureLod(s, uv + vec2(off.x, off.y), 0.0).g;
//	smps[3] = textureLod(s, uv + vec2(off.y, 0), 0.0).g;
//	smps[5] = textureLod(s, uv + vec2(off.x, 0), 0.0).g;
//
//	smps[6] = textureLod(s, uv + vec2(off.y, off.x), 0.0).g;
//	smps[7] = textureLod(s, uv + vec2(0, off.x), 0.0).g;
//	smps[8] = textureLod(s, uv + vec2(off.x, off.x), 0.0).g;
//
//	vec3 normal;
//	normal.x = scale * -(3 * (smps[2] - smps[0]) + 10 * (smps[5] - smps[3]) + 3 * (smps[8] - smps[6]));
//	normal.y = scale * -(3 * (smps[6] - smps[0]) + 10 * (smps[7] - smps[1]) + 3 * (smps[8] - smps[2]));
//	normal.z = 1.0;
//	return vec4(normalize(normal), 0.0);

	vec2 step = 1.0 / texsize.xy;
    
	float height = textureLod(s, uv, 0.0).r;
    
	vec2 dxy = height - vec2(
      textureLod(s, uv + vec2(step.x, 0.), 0.0).r, 
      textureLod(s, uv + vec2(0., step.y), 0.0).r
	);
    
	dxy /= step;
	dxy.y = -dxy.y;
	
	return vec4(normalize(vec3(-dxy, 10.0)), height);
}
#endif

#if 0
vec4 tex_clut(sampler2D s, vec2 tc, float lodbias)
{
	float index = texture(s, tc.xy, lodbias).r;
	return vec4(
		texture(worldPalette, vec2(index, 0.5)).xyz,
		(index == 0.0) ? 0.0 : 1.0
	);
}

vec4 tex_clut_light(sampler2D s, vec2 tc, float light, float lodbias)
{
	float index = texture(s, tc.xy, lodbias).r;
	index = texture(worldPaletteLights, vec2(index, light)).x;
	return vec4(texture(worldPalette, vec2(index, 0.5)).xyz, 0.0);
}
#endif

#ifdef CAN_BILINEAR_FILTER
void bilinear_paletted(vec2 uv, out vec4 color, out vec4 emissive)
{
	float mip = texQueryLod(tex, uv);
	//mip += compute_mip_bias(f_coord.y);
	mip = min(mip, float(numMips - 1));

	ivec2 ires = textureSize( tex, int(mip) );
	vec2  fres = vec2( ires );

	vec2 st = uv*fres - 0.5;
    vec2 i = floor( st );
    vec2 w = fract( st );

	// textureGather doesn't handle mips, need to sample manually
	// use textureLod instead of texelFetch/manual textureGather to respect sampler states
	// this should be quite cache friendly so the overhead is minimal
    float a = textureLod( tex, (i + vec2(0.5,0.5)) / fres, mip ).x;
    float b = textureLod( tex, (i + vec2(1.5,0.5)) / fres, mip ).x;
    float c = textureLod( tex, (i + vec2(0.5,1.5)) / fres, mip ).x;
    float d = textureLod( tex, (i + vec2(1.5,1.5)) / fres, mip ).x;
	
	// read the palette
	vec4 ca = texture(worldPalette, vec2(a, 0.5));
    vec4 cb = texture(worldPalette, vec2(b, 0.5));
    vec4 cc = texture(worldPalette, vec2(c, 0.5));
    vec4 cd = texture(worldPalette, vec2(d, 0.5));

    if (a == 0.0) {
        ca.a = 0.0;
    }
    if (b == 0.0) {
        cb.a = 0.0;
    }
    if (c == 0.0) {
        cc.a = 0.0;
    }
    if (d == 0.0) {
        cd.a = 0.0;
    }

	color = mix(mix(ca, cb, w.x), mix(cc, cd, w.x), w.y);

	// Makes sure light is in a sane range
    float light = 0.0;// clamp(f_light, 0.0, 1.0);

	// read the light palette
	a = texture(worldPaletteLights, vec2(a, light)).x;
	b = texture(worldPaletteLights, vec2(b, light)).x;
	c = texture(worldPaletteLights, vec2(c, light)).x;
	d = texture(worldPaletteLights, vec2(d, light)).x;

	ca = texture(worldPalette, vec2(a, 0.5));
    cb = texture(worldPalette, vec2(b, 0.5));
    cc = texture(worldPalette, vec2(c, 0.5));
    cd = texture(worldPalette, vec2(d, 0.5));
	
	emissive = mix(mix(ca, cb, w.x), mix(cc, cd, w.x), w.y);
}

vec4 tex_clut_bilinear(sampler2D s, vec2 uv, float lodbias)
{
	float mip = texQueryLod(s, uv);
	mip += lodbias;
	mip = min(mip, float(numMips - 1));

	ivec2 ires = textureSize( s, int(mip) );
	vec2  fres = vec2( ires );

	vec2 st = uv * fres - 0.5;
    vec2 i = floor( st );
    vec2 w = fract( st );

	// textureGather doesn't handle mips, need to sample manually
	// use textureLod instead of texelFetch/manual textureGather to respect sampler states
	// this should be quite cache friendly so the overhead is minimal
    float a = textureLod( s, (i + vec2(0.5,0.5)) / fres, mip ).x;
    float b = textureLod( s, (i + vec2(1.5,0.5)) / fres, mip ).x;
    float c = textureLod( s, (i + vec2(0.5,1.5)) / fres, mip ).x;
    float d = textureLod( s, (i + vec2(1.5,1.5)) / fres, mip ).x;
	
	// read the palette
	vec4 ca = texture(worldPalette, vec2(a, 0.5));
    vec4 cb = texture(worldPalette, vec2(b, 0.5));
    vec4 cc = texture(worldPalette, vec2(c, 0.5));
    vec4 cd = texture(worldPalette, vec2(d, 0.5));

    if (a == 0.0) {
        ca.a = 0.0;
    }
    if (b == 0.0) {
        cb.a = 0.0;
    }
    if (c == 0.0) {
        cc.a = 0.0;
    }
    if (d == 0.0) {
        cd.a = 0.0;
    }

	return mix(mix(ca, cb, w.x), mix(cc, cd, w.x), w.y);
}

vec4 tex_clut_bilinear_light(sampler2D s, vec2 uv, float light, float lodbias)
{
    light = clamp(light, 0.0, 1.0);

	float mip = texQueryLod(s, uv);
	mip += lodbias;
	mip = min(mip, float(numMips - 1));

	ivec2 ires = textureSize( s, int(mip) );
	vec2  fres = vec2( ires );

	vec2 st = uv * fres - 0.5;
    vec2 i = floor( st );
    vec2 w = fract( st );

	// textureGather doesn't handle mips, need to sample manually
	// use textureLod instead of texelFetch/manual textureGather to respect sampler states
	// this should be quite cache friendly so the overhead is minimal
    float a = textureLod( s, (i + vec2(0.5,0.5)) / fres, mip ).x;
    float b = textureLod( s, (i + vec2(1.5,0.5)) / fres, mip ).x;
    float c = textureLod( s, (i + vec2(0.5,1.5)) / fres, mip ).x;
    float d = textureLod( s, (i + vec2(1.5,1.5)) / fres, mip ).x;
	
	// read the light palette
	a = texture(worldPaletteLights, vec2(a, light)).x;
	b = texture(worldPaletteLights, vec2(b, light)).x;
	c = texture(worldPaletteLights, vec2(c, light)).x;
	d = texture(worldPaletteLights, vec2(d, light)).x;

	// read the palette
	vec4 ca = texture(worldPalette, vec2(a, 0.5));
    vec4 cb = texture(worldPalette, vec2(b, 0.5));
    vec4 cc = texture(worldPalette, vec2(c, 0.5));
    vec4 cd = texture(worldPalette, vec2(d, 0.5));

    if (a == 0.0) {
        ca.a = 0.0;
    }
    if (b == 0.0) {
        cb.a = 0.0;
    }
    if (c == 0.0) {
        cc.a = 0.0;
    }
    if (d == 0.0) {
        cd.a = 0.0;
    }

	ca = vec4(texture(worldPalette, vec2(a, 0.5)).rgb, 0.0);
    cb = vec4(texture(worldPalette, vec2(b, 0.5)).rgb, 0.0);
    cc = vec4(texture(worldPalette, vec2(c, 0.5)).rgb, 0.0);
    cd = vec4(texture(worldPalette, vec2(d, 0.5)).rgb, 0.0);
	
	return mix(mix(ca, cb, w.x), mix(cc, cd, w.x), w.y);
}

#endif // CAN_BILINEAR_FILTER

#endif // FRAGMENT_SHADER

#endif
