// common vertex attribute layout
//
// wanted to use things like GL_AMD_shader_explicit_vertex_parameter but they're fucking unstable as all fuck
// crashing during shader compilation galore, and GL_EXT_fragment_shader_barycentric doesn't even work properly (always returns vertex 0)
// maybe I'd have better luck on nvidia but whatever

import "defines.gli"

#ifndef ATTR_H
#define ATTR_H

#ifdef VERTEX_SHADER

	// input assembler attributes
	layout(location = 0) in  vec3 coord3d;		// vertex position
	layout(location = 1) in flex3 v_normal;		// vertex normal
	layout(location = 2) in flex4 v_color[2];	// up to 2 vertex colors
	layout(location = 4) in  vec3 v_uv[4];		// up to 4 texcoords

	#define VAPI out

#else

	#define VAPI in

#endif

layout(location = 0) VAPI  vec4 f_coord;
layout(location = 1) VAPI flex3 f_normal;
layout(location = 2) VAPI  flex f_lodbias;
layout(location = 3) VAPI flex4 f_color[COLOR_SETS];
#ifdef MOTION_BLUR
layout(location = 5) VAPI  vec4 f_curTC;
layout(location = 6) VAPI  vec4 f_prevTC;
#endif
layout(location = 7) VAPI  vec3 f_uv[UV_SETS];
	
#ifndef VERTEX_SHADER

	vec3  fetch_vtx_pos()			{ return             f_coord.xyz; }
	vec3  fetch_vtx_dir()			{ return normalize(-f_coord.xyz); }
	vec2  fetch_vtx_uv(uint i)		{ return  f_uv[i].xy / f_uv[i].z; } // todo: move the proj to an op
	flex3 fetch_vtx_normal()		{ return                f_normal; }
	float fetch_vtx_depth()			{ return               f_coord.w; }
	vec4  fetch_vtx_coord()			{ return                 f_coord; }
	flex4 fetch_vtx_color(uint i)	{ return              f_color[i]; }	
	flex fetch_vtx_lodbias()		{ return               f_lodbias; }

#endif


#endif // ATTR_H
