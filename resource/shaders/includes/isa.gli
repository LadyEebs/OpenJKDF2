// instruction set for simple dx8 style shader VM
//
// all instruction related decoding and branching is uniform/wave invariant (a.k.a scalar ops on AMD)
// everything reflecting that intent is prefixed with an s_

#include "defines.gli"
#include "uniforms.gli"

#ifndef ISA_H
#define ISA_H

#ifdef FRAGMENT_SHADER

// arithmetic op codes, must match std3D_ShaderAluOp
// todo: pass these into the code so they always match the enum
#define OP_NOP		 0	// no op
#define OP_MOV		 1	// move
#define OP_RCP		 2	// reciprocal
#define OP_EXP2		 3	// base 2 exponential
#define OP_LOG2		 4	// base 2 logarithm
#define OP_SQRT      5  // square root
#define OP_ADD		 6	// addition
#define OP_SUB		 7	// subtract
#define OP_MUL		 8	// multiply
#define OP_DIV		 9	// division
#define OP_MAX		10	// maximum
#define OP_MIN		11	// minimum
#define OP_MAC		12	// multiply accumulate
#define OP_DP2		13	// dot2
#define OP_DP3		14	// dot3
#define OP_DP4		15	// dot4
#define OP_POW		16	// power
#define OP_TEX		17	// texture
#define OP_OPM		18	// offset parallax
#define OP_POM		19	// steep parallax
#define OP_MAD		20	// multiply add
#define OP_MIX		21	// mix/interpolate
#define OP_CMP		22	// compare
#define OP_CND		23	// condition
#define OP_TEXDUDV	24	// texture with offset

// source types
#define REG_TYPE_GPR	0	// register
#define REG_TYPE_CLR	1	// color
#define REG_TYPE_CON	2	// constant
#define REG_TYPE_TEX	3	// texcoord
#define REG_TYPE_IMM8	4	// 8 bit immediate value
#define REG_TYPE_IMM16	5	// 16 bit immediate value
#define REG_TYPE_RSV1	6	// reserved for future use
#define REG_TYPE_SYS	7	// system value

#define REG_U8  0
#define REG_S8  1
#define REG_F16 2
#define REG_F32 3

// source negate or invert
#define SRC_NEG_INV_NONE 0
#define SRC_NEG_INV_NEG  1	// negate: -x
#define SRC_NEG_INV_INV  2	// invert: 1 - x

// source scale and bias
#define SRC_SCALE_BIAS_NONE	0
#define SRC_SCALE_BIAS_2X	1	// x * 2
#define SRC_SCALE_BIAS_4X	2	// x * 4
#define SRC_SCALE_BIAS_D2	3	// x / 2
#define SRC_SCALE_BIAS_D4	4	// x / 4
#define SRC_SCALE_BIAS_BIAS	5	// x - 0.5

// source reduction operations
#define SRC_RED_NONE 0
#define SRC_RED_LUM  1	// dot(xyz, lum)
#define SRC_RED_SUM  2	// x+y+z
#define SRC_RED_AVG  3	// (x+y+z)/3
#define SRC_RED_MIN  4	// min(x,y,z)
#define SRC_RED_MAX  5	// max(x,y,z)
#define SRC_RED_MAG  6	// length(xyz)

// destination modifiers
#define DST_MUL_X2 1
#define DST_MUL_X4 2
#define DST_MUL_D2 3
#define DST_MUL_D4 4

// system register ids
#define SHADER_SYS_TIME 0
#define SHADER_SYS_POS  1
#define SHADER_SYS_Z 2
// material registers
#define SHADER_SYS_MAT_FILL         3
#define SHADER_SYS_MAT_ALBEDO       4
#define SHADER_SYS_MAT_EMISSIVE     5
#define SHADER_SYS_MAT_SPECULAR     6
#define SHADER_SYS_MAT_ROUGHNESS    7
#define SHADER_SYS_MAT_DISPLACEMENT 8

struct vm_dst
{
	uint addr;
	uint fmt;
	uint mask;
	uint dest;
	uint swizzle;
	uint multiplier;
	uint absolute;
	uint negate;
};

struct vm_src
{
	uint idx;
	uint addr;
	uint type;
	uint fmt;
	uint absolute;
	uint swizzle;
	uint scale_bias;
	uint neg_inv;
	uint reduction;
};

struct vm_instr
{
	uint   opcode;
	uint   prec;
	uint   imm;
	vm_dst dst;
	vm_src src0;
	vm_src src1;
	vm_src src2;
};

uint s_expand_mask(uint s_mask)
{
	uint s_result;
	s_result  = ((s_mask & 0x8) != 0) ? 0xFF000000u : 0x00000000u;
    s_result |= ((s_mask & 0x4) != 0) ? 0x00FF0000u : 0x00000000u;
    s_result |= ((s_mask & 0x2) != 0) ? 0x0000FF00u : 0x00000000u;
    s_result |= ((s_mask & 0x1) != 0) ? 0x000000FFu : 0x00000000u;
	return s_result;
}

void s_decode_opcode(out uint s_opcode, uint s_ir)
{
	s_opcode = (s_ir & 0x1F);
}

void s_decode_precision(out uint s_precision, uint s_ir)
{
	s_precision = (s_ir >> 5) & 0x1;
}

void s_decode_dst_operand(out vm_dst s_dst, uint s_ir)
{
	s_dst.fmt        = (s_ir >>  6) &  0x3;
	s_dst.negate     = (s_ir >>  8) &  0x1;
	s_dst.addr       = (s_ir >>  9) & 0x7F;
	s_dst.swizzle    = (s_ir >> 16) & 0xFF;
	s_dst.multiplier = (s_ir >> 24) &  0x7;
	s_dst.absolute   = (s_ir >> 27) &  0x1;
	s_dst.mask       = (s_ir >> 28) &  0xF;
	s_dst.mask       = s_expand_mask(s_dst.mask);
}

void s_decode_src_operand(out vm_src s_src, uint s_ir)
{
	s_src.type       = (s_ir      ) &  0x7;
	s_src.absolute   = (s_ir >>  3) &  0x1;
	s_src.fmt        = (s_ir >>  4) &  0x3;
	s_src.idx        = (s_ir >>  6) &  0x3;
	s_src.addr       = (s_ir >>  8) & 0xFF;
	s_src.swizzle    = (s_ir >> 16) & 0xFF;
	s_src.neg_inv    = (s_ir >> 24) &  0x3;
	s_src.scale_bias = (s_ir >> 26) &  0x7;
	s_src.reduction  = (s_ir >> 29) &  0x7;
}

void s_decode_instr(out vm_instr s_ir_out, uvec4 s_ir)
{
	s_ir_out.imm = s_ir.w;

	s_decode_opcode     (s_ir_out.opcode,    s_ir.x);
	s_decode_precision  (s_ir_out.prec,      s_ir.x);
	s_decode_dst_operand(s_ir_out.dst,       s_ir.x);
	s_decode_src_operand(s_ir_out.src0,      s_ir.y);
	s_decode_src_operand(s_ir_out.src1,      s_ir.z);
	s_decode_src_operand(s_ir_out.src2,      s_ir.w);
}

#endif

#endif
