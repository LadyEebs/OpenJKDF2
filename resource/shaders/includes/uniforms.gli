#ifndef UNIFORMS_H
#define UNIFORMS_H

// todo: define elsewhere
#define CLUSTER_MAX_LIGHTS          256u // match RDCAMERA_MAX_LIGHTS/SITHREND_NUM_LIGHTS
#define CLUSTER_MAX_OCCLUDERS       128u
#define CLUSTER_MAX_DECALS          256
#define CLUSTER_MAX_ITEMS           (CLUSTER_MAX_LIGHTS + CLUSTER_MAX_OCCLUDERS + CLUSTER_MAX_DECALS)
#define CLUSTER_BUCKETS_PER_CLUSTER (CLUSTER_MAX_ITEMS / 32u)
#define CLUSTER_GRID_SIZE_X         16u
#define CLUSTER_GRID_SIZE_Y         8u
#define CLUSTER_GRID_SIZE_Z         24u
#define CLUSTER_GRID_SIZE_XYZ (CLUSTER_GRID_SIZE_X * CLUSTER_GRID_SIZE_Y * CLUSTER_GRID_SIZE_Z)
#define CLUSTER_GRID_TOTAL_SIZE (CLUSTER_GRID_SIZE_X * CLUSTER_GRID_SIZE_Y * CLUSTER_GRID_SIZE_Z * CLUSTER_BUCKETS_PER_CLUSTER)

// Shared uniforms across batch calls and render passes
layout(std140) uniform sharedBlock
{
	vec4  ambientSGBasis[8];

	vec4  colorEffects_tint;
	vec4  colorEffects_filter;
	vec4  colorEffects_add;
	
	vec4  mipDistances;

	float colorEffects_fade;
	float light_mult;
	vec2  iResolution;

	vec2  clusterTileSizes;
	vec2  clusterScaleBias;
};

// Fog state
layout(std140) uniform fogBlock
{
	vec4  fogColor;
	int   fogEnabled;
	float fogStart;
	float fogEnd;
	float fogAnisotropy;
	vec4  fogLightDir;
};

// Texture state
// todo: TMUs
layout(std140) uniform textureBlock
{
	int   tex_mode;
	int   uv_mode;
	int   texgen;
	int   numMips;

	vec2 texsize;
	vec2 uv_offset;

	vec4 texgen_params;

	vec4 padding;
};

// Material state
layout(std140) uniform materialBlock
{	
	vec4 fillColor;
	vec4 albedoFactor;
	vec4 emissiveFactor;

	float displacement_factor;
	float texPad0, texPad1, texPad2;
};

// Global light buffer
struct light
{
	vec4  position;
	vec4  direction_intensity;
	vec4  color;
	
	int   type;
	float falloffMin;
	float falloffMax;
	float lux;
	
	float angleX;
	float cosAngleX;
	float angleY;
	float cosAngleY;
};

layout(std140) uniform lightBlock
{
	uint firstLight;
	uint numLights;
	uint lightPad0, lightPad1;
	light lights[CLUSTER_MAX_LIGHTS];
};

// Global occluder buffer
struct occluder
{
	vec4 position;
};

layout(std140) uniform occluderBlock
{
	uint firstOccluder;
	uint numOccluders;
	uint occluderPad0, occluderPad1;
	occluder occluders[CLUSTER_MAX_OCCLUDERS];
};

// Global deceal buffer
struct decal
{
	mat4  decalMatrix;
	mat4  invDecalMatrix;
	vec4  uvScaleBias;
	vec4  posRad;
	vec4  color;
	uint  flags;
	float angleFade;
	float padding0;
	float padding1;
};

layout(std140) uniform decalBlock
{
	uint  firstDecal;
	uint  numDecals;
	uint  decalPad0, decalPad1;
	decal decals[CLUSTER_MAX_DECALS];
};

#endif