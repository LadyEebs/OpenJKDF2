// simple dx8 style microcode shader VM

import "defines.gli"
import "uniforms.gli"
import "math.gli"
import "lighting.gli"
import "textures.gli"
import "decals.gli"
import "occluders.gli"
import "framebuffer.gli"
import "isa.gli"
import "reg.gli"
import "attr.gli"

#ifndef VM_H
#define VM_H

#ifdef FRAGMENT_SHADER

void run_vm()
{
	for (uint i = 0; i < REG_COUNT; ++i)
		r[i] = 0;

	for (uint s_pc = 0; s_pc < shaderInstructionCount; ++s_pc)
	{
		vm_instr s_ir;
		s_decode_instr(s_ir, shaderInstructions[s_pc]);

		// read source operands upfront (or else the compile times crawl)
		vec4 s0 = read_src0(s_ir);
		vec4 s1 = read_src1(s_ir);
		vec4 s2 = read_src2(s_ir);

		vec4 result;// = read_dest(s_ir);

		switch(s_ir.opcode)
		{			
		default:
		case OP_NOP:
			return;

		case OP_MOV:
			result = s0;
			break;

		case OP_FRC:
			result = fract(s0);
			break;

		case OP_ADD:
			result = s0 + s1;
			break;

		case OP_SUB:
			result = s0 - s1;
			break;

		case OP_MUL:
			result = s0 * s1;
			break;
			
		case OP_MAX:
			result = max( s0, s1 );
			break;
		
		case OP_MIN:
			result = min( s0, s1 );
			break;
			
		case OP_DP2:
			result = vec4(dot( s0.xy, s1.xy ));
			break;

		case OP_DP3:
			result = vec4(dot( s0.xyz, s1.xyz ));
			break;

		case OP_DP4:
			result = vec4(dot( s0, s1 ));
			break;

		case OP_MAD:
			result = s0 * s1 + s2;
			break;

		case OP_MIX:
			result = mix( s0, s1, s2 );
			break;

		case OP_CMP:
			result = mix( s2, s1, greaterThan( s0, vec4(0.0) ));
			break;

		case OP_CND:
			result = mix( s2, s1, greaterThan( s0, vec4(0.5) ));
			break;

		case OP_POW:
			result = s_ir.prec ? pow( s0, s1 ) : fastPow( s0, s1 );
			break;

		case OP_EXP2:
			result = s_ir.prec ? exp2( s0 ) : fastExp2( s1 );
			break;

		case OP_LOG2:
			result = s_ir.prec ? log2( s0 ) : fastLog2( s1 );
			break;

		case OP_DIV:
			result = s_ir.prec ? s0 / s1 : s0 * fastRcpNR0(s1);
			break;

		case OP_RCP:
			result = s_ir.prec ? (1.0 / s0) : fastRcpNR0(s0);
			break;

		case OP_RSQRT:
			result = s_ir.prec ? inversesqrt(s0) : fastRcpSqrtNR0(s0);
			break;

		case OP_SQRT:
			result = s_ir.prec ? sqrt(s0) : fastSqrtNR0(s0);
			break;

		case OP_SIN:
			result = s_ir.prec ? sin(s0) : fastSin(s0);
			break;

		case OP_COS:
			result = s_ir.prec ? cos(s0) : fastCos(s0);
			break;

		// todo: remove this and just use tex
		case OP_FBR:
			result = vec4(textureLod(refrtex, fract(s0.xy), s1.x).xyz, 1.0);
			break;

		case OP_TEX:
			if (tex_mode == TEX_MODE_TEST)
				result = vec4(fillColor.xyz, 1.0);
			else
				result = texture(textures[s_ir.src0.addr], s1.xy, s_lodbias);
			break;
		
		case OP_TEXLOD:
			if (tex_mode == TEX_MODE_TEST)
				result = vec4(fillColor.xyz, 1.0);
			else
				result = textureLod(textures[s_ir.src0.addr], s1.xy, s2.x);
			break;
					
		case OP_TEXADD:
			if (tex_mode == TEX_MODE_TEST)
				result = vec4(fillColor.xyz, 1.0);
			else
				result = texture(textures[s_ir.src0.addr], s1.xy + s2.xy, s_lodbias);
			break;		

		case OP_TEXINFO:
			result = vec4(textureSize(textures[s_ir.src0.addr], int(s1.x)).xy, 1.0, textureQueryLevels(textures[s_ir.src0.addr]));
			break;

		case OP_POM:
			if (tex_mode != TEX_MODE_TEST)
			{
				if (s_ir.prec)
					result.xy = steep_parallax(
							textures[s_ir.src0.addr],
							s1.xy,
							decode_octahedron_uint(vdir),
							s2.x
						).xy;
				else
					result.xy = parallax(
							textures[s_ir.src0.addr],
							s1.xy,
							decode_octahedron_uint(vdir),
							s2.x
						).xy;
				result.zw = vec2(0.0);
			}
			break;
		}

		write_reg(s_ir, result);
	}
}

#endif

#endif
