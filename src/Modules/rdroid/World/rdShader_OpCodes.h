#ifdef RD_SHADER_OPCODE

RD_SHADER_OPCODE(NOP,		 0 | RD_SHADER_0_OPERANDS)	// no op
RD_SHADER_OPCODE(ADD,		 1 | RD_SHADER_2_OPERANDS)	// addition
RD_SHADER_OPCODE(CMP,		 2 | RD_SHADER_3_OPERANDS)	// compare
RD_SHADER_OPCODE(CND,		 3 | RD_SHADER_3_OPERANDS)	// condition
RD_SHADER_OPCODE(DIV,		 4 | RD_SHADER_2_OPERANDS)	// division
RD_SHADER_OPCODE(DP2,		 5 | RD_SHADER_2_OPERANDS)	// dot2
RD_SHADER_OPCODE(DP3,		 6 | RD_SHADER_2_OPERANDS)	// dot3
RD_SHADER_OPCODE(DP4,		 7 | RD_SHADER_2_OPERANDS)	// dot4
RD_SHADER_OPCODE(EXP2,		 8 | RD_SHADER_1_OPERANDS)	// base 2 exponential
RD_SHADER_OPCODE(FBR,		 9 | RD_SHADER_2_OPERANDS)	// framebuffer read
RD_SHADER_OPCODE(FRC,		10 | RD_SHADER_1_OPERANDS)	// fractional
RD_SHADER_OPCODE(LOG2,		11 | RD_SHADER_1_OPERANDS)	// base 2 logarithm
RD_SHADER_OPCODE(MAC,		12 | RD_SHADER_2_OPERANDS)	// multiply accumulate
RD_SHADER_OPCODE(MAD,		13 | RD_SHADER_3_OPERANDS)	// multiply add
RD_SHADER_OPCODE(MAX,		14 | RD_SHADER_2_OPERANDS)	// maximum 2
RD_SHADER_OPCODE(MIN,		15 | RD_SHADER_2_OPERANDS)	// minimum 2
RD_SHADER_OPCODE(MIX,		16 | RD_SHADER_3_OPERANDS)	// mix/interpolate
RD_SHADER_OPCODE(MOV,		17 | RD_SHADER_1_OPERANDS)	// move
RD_SHADER_OPCODE(MUL,		18 | RD_SHADER_2_OPERANDS)	// multiply
RD_SHADER_OPCODE(OPM,		19 | RD_SHADER_3_OPERANDS)	// offset parallax
RD_SHADER_OPCODE(POM,		20 | RD_SHADER_3_OPERANDS)	// steep parallax
RD_SHADER_OPCODE(POW,		21 | RD_SHADER_2_OPERANDS)	// power
RD_SHADER_OPCODE(RCP,		22 | RD_SHADER_1_OPERANDS)	// reciprocal
RD_SHADER_OPCODE(SQRT,		23 | RD_SHADER_1_OPERANDS)	// square root
RD_SHADER_OPCODE(SUB,		24 | RD_SHADER_2_OPERANDS)	// subtract
RD_SHADER_OPCODE(TEX,		25 | RD_SHADER_2_OPERANDS)	// texture
RD_SHADER_OPCODE(TEXLOD,	26 | RD_SHADER_2_OPERANDS)	// texture lod
RD_SHADER_OPCODE(TEXDUDV,	27 | RD_SHADER_3_OPERANDS)	// texture with offset

#endif
