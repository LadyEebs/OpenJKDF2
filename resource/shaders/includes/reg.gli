// register file for simple dx8 style shader VM
//
// the packing/unpacking might be potentially be an issue on dx10 era/VLIW hardware or mobile (lol mobile)
// this should eventually be tested and changes made as needed (or even a simple alternative path with fixed shading)
// ....what I would give for packed math support or 8 bit arithmetic on older gpus *sobs*

#include "defines.gli"
#include "uniforms.gli"
#include "math.gli"
#include "isa.gli"

#ifndef REG_H
#define REG_H

#ifdef FRAGMENT_SHADER

// todo: this should be permutations
#ifdef REFRACTION
#define REG_COUNT    6
#define REG_FP_COUNT 4
#else
#define REG_COUNT    2
#define REG_FP_COUNT 1
#endif

// registers
uint  vdir;         //    16:16 - tangent space view dir
uint  r[REG_COUNT]; // flexible - temp registers (rgba8, rg16f, r32f)

#if !defined(UNLIT) || !defined(FRAG_ATTR_FETCH)
uint  v[2]; // 8:8:8:8 - color registers (tone mapped)
#endif

#ifndef FRAG_ATTR_FETCH
uvec2 vpos;			   // 16:16:16:16 - view space position + depth
vec2 tr[REG_FP_COUNT]; // 32:32 - texture coordinate registers
#endif

vec2 packTexcoordRegister(vec2 unpackedInput)
{
	return unpackedInput.xy;//packHalf2x16(unpackedInput.xy - 0.5);
}

vec2 read_texcoord_reg(uint i)
{
#ifndef GL_AMD_shader_explicit_vertex_parameter
	return tr[i];//unpackHalf2x16(tr[i]).xy + 0.5;
#else
	vec3 uv = fetch_vtx_uv(i);
	return uv.xy / uv.z;
#endif
}

uint pack_vertex_reg(vec4 unpackedInput)
{
	unpackedInput.rgb = fastExp2(-unpackedInput.rgb);
	return packUnorm4x8(unpackedInput);
}

vec4 unpack_vertex_reg(uint packedInput)
{
	vec4 v = unpackUnorm4x8(packedInput);
	v.rgb = -fastLog2(v.rgb);
	return v;
}

vec4 read_color_reg(uint i)
{
#if defined(UNLIT) && defined(FRAG_ATTR_FETCH)
	return fetch_vtx_color(i);
#else
	return unpack_vertex_reg(v[i]);
#endif
}

vec3 read_vpos()
{
#ifdef FRAG_ATTR_FETCH
	return fetch_vtx_pos();
#else
	return unpackHalf4x16(vpos).xyz;
#endif
}

float read_z()
{
#ifdef FRAG_ATTR_FETCH
	return fetch_vtx_depth();
#else
	return unpackHalf4x16(vpos).w;
#endif
}

uint swizzle_comp(uint s_swizzle, uint idx)
{
	return (s_swizzle >> (idx << 1)) & 0x03;
}

vec4 swizzle_reg(vec4 reg, uint s_swizzle)
{
	vec4 result;
	result.x = reg[swizzle_comp(s_swizzle, 0)];
	result.y = reg[swizzle_comp(s_swizzle, 1)];
	result.z = reg[swizzle_comp(s_swizzle, 2)];
	result.w = reg[swizzle_comp(s_swizzle, 3)];
	return result;
}

vec4 decode_reg(uint reg, uint s_fmt)
{
	switch(s_fmt)
	{
	default:
	case REG_U8:	return unpackUnorm4x8(reg);
	case REG_S8:	return unpackSnorm4x8(reg);
	case REG_F16:	return vec4( unpackHalf2x16(reg), 0, 0);
	case REG_F32:	return vec4( uintBitsToFloat(reg) );
	}
}

uint encode_reg(vec4 reg, uint s_fmt)
{
	switch(s_fmt)
	{
	default:
	case REG_U8:	return packUnorm4x8(reg);
	case REG_S8:	return packSnorm4x8(reg);
	case REG_F16:	return packHalf2x16(reg.xy);
	case REG_F32:	return floatBitsToUint(reg.x);
	}
}

vec4 read_system_value(uint s_addr)
{
	switch(s_addr)
	{
	case SHADER_SYS_TIME:				return vec4(timeSeconds);
	case SHADER_SYS_Z:					return vec4(read_z());
	case SHADER_SYS_POS:				return vec4(read_vpos(), 0.0);
		// material registers
	case SHADER_SYS_MAT_FILL:			return fillColor;
	case SHADER_SYS_MAT_ALBEDO:			return albedoFactor;
	case SHADER_SYS_MAT_EMISSIVE:		return emissiveFactor;
	case SHADER_SYS_MAT_SPECULAR:		return specularFactor;
	case SHADER_SYS_MAT_ROUGHNESS:		return vec4(roughnessFactor);
	case SHADER_SYS_MAT_DISPLACEMENT:	return vec4(displacement_factor);
	default:
		return vec4(0.0);
	}
}

vec4 fetch_reg(vm_src s_operand, uint s_imm)
{
	switch(s_operand.type)
	{
	case REG_TYPE_GPR:	 return decode_reg(r[s_operand.addr], s_operand.fmt);
	case REG_TYPE_CLR:	 return read_color_reg(s_operand.addr);
	case REG_TYPE_CON:	 return shaderConstants[s_operand.addr];
	case REG_TYPE_TEX:	 return tr[s_operand.addr].xyxy;
	case REG_TYPE_IMM8:	 return vec4(unpackSnorm4x8(s_operand.addr).x);
	case REG_TYPE_IMM16: return vec4(unpackHalf2x16(s_imm >> (s_operand.idx << 4)).x);
	case REG_TYPE_SYS:   return read_system_value(s_operand.addr);
	default:			 return vec4(0.0);
	}
}

vec4 apply_scale_bias(vec4 reg, uint s_scalebias)
{
	switch(s_scalebias)
	{
	case SRC_SCALE_BIAS_2X:		return reg * 2.0;
	case SRC_SCALE_BIAS_4X:		return reg * 4.0;
	case SRC_SCALE_BIAS_D2:		return reg * 0.5;
	case SRC_SCALE_BIAS_D4:		return reg * 0.25;
	case SRC_SCALE_BIAS_BIAS:	return reg + -0.5;
	case SRC_SCALE_BIAS_BX2:	return reg * 2.0 + (-1.0);
	default:					return reg;
	}
}

vec4 apply_neg_inv(vec4 reg, uint s_neg_inv)
{
	switch(s_neg_inv)
	{
	case SRC_NEG_INV_NEG:	return -reg; 
	case SRC_NEG_INV_INV:	return 1.0 - reg;
	default:				return reg;
	}
}

vec4 apply_neg_inv_abs(vec4 reg, uint s_neg_inv)
{
	switch(s_neg_inv)
	{
	case SRC_NEG_INV_NEG:	return -abs(reg); 
	case SRC_NEG_INV_INV:	return 1.0 - abs(reg);
	default:				return abs(reg);
	}
}

vec4 apply_reduction(vec4 reg, uint s_reduction)
{
	switch(s_reduction)
	{
	case SRC_RED_LUM:	return vec4( dot(reg.rgb, vec3(0.2125, 0.7154, 0.0721)) );
	case SRC_RED_SUM:	return vec4( reg.r + reg.g + reg.b );
	case SRC_RED_AVG:	return vec4( (reg.r + reg.g + reg.b) / 3.0 );
	case SRC_RED_MIN:	return vec4( min3(reg.r, reg.g, reg.b) );
	case SRC_RED_MAX:	return vec4( max3(reg.r, reg.g, reg.b) );
	case SRC_RED_MAG:	return vec4( fastLength(reg.rgb) );
	default:			return reg;
	}
}

vec4 read_src(vm_src s_operand, vm_instr s_ir)
{
	// fetch the relevant register or immediate value
	vec4 reg = fetch_reg(s_operand, s_ir.imm);

	// apply swizzle
	reg = swizzle_reg(reg, s_operand.swizzle);
	
	// do any needed scaling and biasing
	reg = apply_scale_bias(reg, s_operand.scale_bias);
	
	// take absolute if necessary
	if( s_operand.absolute)
		reg = apply_neg_inv_abs(reg, s_operand.neg_inv);
	else
		reg = apply_neg_inv(reg, s_operand.neg_inv);

	return apply_reduction(reg, s_operand.reduction);
}

vec4 read_src0(vm_instr s_ir)
{
	return read_src(s_ir.src0, s_ir);
}

vec4 read_src1(vm_instr s_ir)
{
	return read_src(s_ir.src1, s_ir);
}

vec4 read_src2(vm_instr s_ir)
{
	return read_src(s_ir.src2, s_ir);
}

void write_reg(vm_instr s_ir, vec4 reg)
{
	// clear the masked bits
	r[s_ir.dst.addr] &= ~s_ir.dst.mask;

	// swizzle for the destination
	reg = swizzle_reg(reg, s_ir.dst.swizzle);

	switch (s_ir.dst.modifier)
	{
		case DST_MOD_X2:		reg =         reg * 2.0;	break;
		case DST_MOD_X4:		reg =         reg * 4.0;	break;
		case DST_MOD_D2:		reg =         reg * 0.5;	break;
		case DST_MOD_D4:		reg =        reg * 0.25;	break;
		case DST_MOD_POW2:		reg =         pow2(reg);	break;
		case DST_MOD_POW4:		reg =         pow4(reg);	break;
		case DST_MOD_SQRT:		reg =         sqrt(reg);	break;
		case DST_MOD_PACK:		reg =   reg * 0.5 + 0.5;	break;
		case DST_MOD_ABS:		reg =          abs(reg);	break;
		case DST_MOD_NEG:		reg =              -reg;	break;
		case DST_MOD_ROLLOFF:   reg = reg / (1.0 + reg);	break;
		default:				reg =               reg;	break;
	}

	// write it
	uint p = encode_reg(reg, s_ir.dst.fmt);
	r[s_ir.dst.addr] |= (p & s_ir.dst.mask);
}

vec4 read_dest(vm_instr s_ir)
{
	return decode_reg(r[s_ir.dst.addr], s_ir.dst.fmt);
}

#endif

#endif
