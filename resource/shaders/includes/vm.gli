// simple dx8 style microcode shader VM
// note: the packing/unpacking might be a penalty on dx10 era/VLIW hardware
// should eventually be tested and an alternate path written if necessary
// what I would give for packed math support in gl3.3 and older gpus *sobs*

#include "defines.gli"
#include "uniforms.gli"
#include "math.gli"
#include "lighting.gli"
#include "textures.gli"
#include "decals.gli"
#include "occluders.gli"

#ifndef VM_H
#define VM_H

#ifdef FRAGMENT_SHADER

// arithmetic op codes, must match std3D_ShaderAluOp
// todo: pass these into the code so they always match the enum
#define OP_NOP		 0	// no op
#define OP_ADD		 1	// addition
#define OP_BBD       2  // blackbody
#define OP_DP3		 3	// dot3
#define OP_DP4		 4	// dot4
#define OP_LDC		 5	// constant load
#define OP_LRP		 6	// linear interpolation
#define OP_MAD		 7	// multiply add
#define OP_MAX		 8	// maximum
#define OP_MIN		 9	// minimum
#define OP_MOV		10	// move
#define OP_MUL		11	// multiply

// texture op codes, must match std3D_ShaderTexOp
#define OP_TEX		 1	// texture sample
#define OP_TEXI      2  // texture sample with emissive scale
#define OP_TEXOPM    3  // offset a UV slot with offset parallax mapping
#define OP_TEXCOORD  4  // convert UV to color

// source register modifiers, only applicable to alu instructions
#define SRC_MOD_NONE   0x0 // no modifier
#define SRC_MOD_NEGATE 0x1 // -x
#define SRC_MOD_BIAS   0x2 // x - 0.5
#define SRC_MOD_BX2    0x4 // x * 2 - 1
#define SRC_MOD_INVERT 0x8 // 1 - x

// destination register modifiers
#define DST_MOD_NONE 0 // no modifier
#define DST_MOD_X2   1 // x * 2
#define DST_MOD_X4   2 // x * 4
#define DST_MOD_D2   3 // x / 2
#define DST_MOD_D4   4 // x / 4

// registers
float lodbias;  // float lod bias, todo: pack?
uint  vdir;     // rg16f tangent space view dir
uint  fog;      // rgba8 fog register (filled by fixed function fog)
uint  r[4];     // rgba8 temp registers (for color math)
uint  v[2];     // rgba8 color registers
vec2 tr[2];     // uv32 texture coordinate registers
uint  d[2];     // decals

vec4 unpackRegister(uint packedInput)
{
	return vec4((packedInput >> 16u) & 0xFFu, (packedInput >> 8u) & 0xFFu, packedInput & 0xFFu, (packedInput >> 24u) & 0xFFu);
}

uint packRegister(vec4 unpackedInput)
{
	unpackedInput = clamp(unpackedInput, vec4(0.0), vec4(255.0));
	return (uint(unpackedInput.r) << 16u) | (uint(unpackedInput.g) << 8u) | (uint(unpackedInput.b) << 0u) | (uint(unpackedInput.a) << 24u);
}

vec4 unpackTexcoordRegister(vec2 packedInput)
{
	return vec4(packedInput.xy, 0.0, 0.0);
}

vec2 packTexcoordRegister(vec2 unpackedInput)
{
	return unpackedInput;
}

vec4 read_texcoord_reg(uint i)
{
	return unpackTexcoordRegister(tr[i]);
}

vec4 unpackColorRegister(/*uvec2*/ uint packedInput)
{
	//return vec4(unpackHalf2x16(packedInput.x), unpackHalf2x16(packedInput.y));
	return vec4((packedInput >> 16u) & 0xFFu, (packedInput >> 8u) & 0xFFu, packedInput & 0xFFu, (packedInput >> 24u) & 0xFFu);
}

/*uvec2*/ uint packColorRegister(vec4 unpackedInput)
{
//	return uvec2(packHalf2x16(unpackedInput.xy), packHalf2x16(unpackedInput.zw));
	unpackedInput = clamp(unpackedInput, vec4(0.0), vec4(255.0));
	return (uint(unpackedInput.r) << 16u) | (uint(unpackedInput.g) << 8u) | (uint(unpackedInput.b) << 0u) | (uint(unpackedInput.a) << 24u);
}

vec4 read_color_reg(uint i)
{
	return unpackColorRegister(v[i]);
}

vec4 read_reg(uint i)
{
	uint idx = (i & 0x7);
	uint mod_bits = (i >> 3) & 0xF;
	vec4 v = idx > 3 ? read_color_reg(idx - 4) : unpackRegister(r[idx]);
	
	if ((mod_bits & SRC_MOD_INVERT) != 0)
		//return  255.0 * log2(v /  255.0) / -1.0;
		//return pow(v / 255.0, vec4(2.0)) * 255.0;
		return 255.0 - v;
    
	if(mod_bits > 1)
	{
		float scale = 1.0 + float((mod_bits & SRC_MOD_BX2) != 0); // y = 2 if BX2, 1 otherwise
		float bias = float((mod_bits & SRC_MOD_BX2) != 0) * (-255.0) + (float((mod_bits & SRC_MOD_BIAS) != 0) * (-127.5));

		v = v * scale + bias;
	}

	return (mod_bits & SRC_MOD_NEGATE) != 0 ? -v : v;
}

void write_reg(uint i, vec4 v)
{
	uint idx = (i & 0x7);
	uint mod_bits = (i >> 3) & 0x7;

	// multiply scale: (1 << (mod_bits & 0x3))
	// division scale: (1 << (mod_bits >> 2))
	v *= float(1 << (mod_bits & 0x3)) / float(1 << (mod_bits >> 2));

	r[idx] = packRegister(v);
}

// must mirror std3D_buildInstruction
void read_instr(uint instr, out uint op, out uint dest, out uint src0, out uint src1, out uint src2)
{
	op   = (instr      ) & 0xF;  // bits 0-4
	dest = (instr >>  4) & 0x3F; // bits 4-10
	src0 = (instr >> 11) & 0x7F; // bits 11-18
	src1 = (instr >> 18) & 0x7F; // bits 18-25
	src2 = (instr >> 25) & 0x7F; // bits 25-32
}

// standard texture sample
vec4 load_tex(in sampler2D s, in vec4 tc)
{
	if (tex_mode == TEX_MODE_TEST)
		return vec4(fillColor * 255.0);
	return vec4(texture(s, tc.xy, lodbias).rgba * 255.0);
}

// standard texture sample with emissive multiplier
vec4 load_tex_light(in sampler2D s, in vec4 tc, in float light)
{
	if (tex_mode == TEX_MODE_TEST)
		return vec4(fillColor.rgb * 255.0, 0.0);
	return vec4(texture(s, tc.xy, lodbias).rgba * vec4(emissiveFactor.rgb * 255.0, 0.0));
}

vec2 steep_parallax(in sampler2D s, in vec4 uv)
{
	if(abs(displacement_factor) <= 1e-4)
		return uv.xy;

	vec3 view_dir = decodeHemiUnitVector(vdir);

	const float min_layers = 32.0;
    const float max_layers = 128.0;
    float num_layers = mix(max_layers, min_layers, abs(view_dir.z));

    float layer_depth = 1.0 / num_layers;
    float current_layer_depth = 0.0;
    vec2 shift_per_layer = (view_dir.xy / view_dir.z) * displacement_factor;
    vec2 d_tc = shift_per_layer / num_layers;

    vec2 current_tc = uv.xy;
    float current_sample = textureLod(s, current_tc, 0).r;

    while(current_layer_depth < current_sample)
	{
        current_tc -= d_tc;
        current_sample = textureLod(s, current_tc, 0).r;
        current_layer_depth += layer_depth;
    }

    vec2 prev_tc = current_tc + d_tc;

    float after_col_depth = current_sample - current_layer_depth;
    float before_col_depth = textureLod(s, prev_tc, 0).r - current_layer_depth + layer_depth;

    float a = after_col_depth / (after_col_depth - before_col_depth);
    vec2 adj_tc = mix(current_tc, prev_tc, a);

    return adj_tc;
}

vec2 parallax(in sampler2D s, in vec4 uv)
{
	if(abs(displacement_factor) <= 1e-4)
		return uv.xy;

	float height = textureLod(s, uv.xy, 0).r;
	height *= displacement_factor;

	vec3 view_dir = decodeHemiUnitVector(vdir);
	//return (view_dir.xy / view_dir.z) * vec2(height) + uv.xy;
	return view_dir.xy * vec2(height) + uv.xy;
}

void run_tex_stage()
{
	// note: instruction decoding needs to be dynamically uniform/constant for the texture access to work
	// it works on this machine, but some machines with actual gl3 limits might not
	for (int pc = 0; pc < shaderTexInstructionCount; ++pc) // program counter
	{
		uint op, dest, src0, src1, src2;
		read_instr(shaderTexInstructions[pc>>2][pc&3], op, dest, src0, src1, src2);

		switch(op)
		{
		case OP_TEXOPM:
			tr[dest & 0x7] = packTexcoordRegister(parallax(textures[src0], read_texcoord_reg(src1)));
			break;

		case OP_TEX:
			write_reg(
				dest,
				load_tex(textures[src0], read_texcoord_reg(src1))
			);
			break;

		case OP_TEXI:
			write_reg(
				dest,
				load_tex_light(textures[src0], read_texcoord_reg(src1), 0.0)
			);
			break;

		case OP_TEXCOORD:
			write_reg(
				dest,
				read_texcoord_reg(src0)
			);
			break;

		default:
		case OP_NOP:
			return;
		}
	}
}

void run_combiner_stage()
{
	for (int pc = 0; pc < shaderInstructionCount; ++pc) // program counter
	{
		uint op, dest, src0, src1, src2;
		read_instr(shaderInstructions[pc>>2][pc&3], op, dest, src0, src1, src2);

		switch(op)
		{
		case OP_ADD:
			write_reg(
				dest,
				read_reg(src0) + read_reg(src1)
			);
			break;

		case OP_BBD:
			//write_reg(
			//	dest,
			//	vec4(blackbody(read_reg(src0).x / 255.0), 1.0)
			//);
			break;

		case OP_DP3:
			write_reg(
				dest,
				vec4(
					// todo: fix the sign
					vec3(dot(read_reg(src0).xyz, read_reg(src1).xyz) / (255.0 * 255.0)),
					(r[dest] >> 24u) & 0xFFu
				)
			);
			break;

		case OP_DP4:
			write_reg(
				dest,
				vec4(
					// todo: fix the sign
					dot(read_reg(src0), read_reg(src1)) / (255.0 * 255.0)
				)
			);
			break;

		case OP_LDC:
			// todo
			break;

		case OP_LRP:
			write_reg(
				dest,
				(read_reg(src1) - read_reg(src0)) * (read_reg(src2) / 255.0) + read_reg(src0)
			);
			break;

		case OP_MAD:
			write_reg(
				dest,
				read_reg(src0) * read_reg(src1) / 255.0 + read_reg(src2)
			);
			break;

		case OP_MAX:
			write_reg(
				dest,
				max(read_reg(src0), read_reg(src1))
			);
			break;
			
		case OP_MIN:
			write_reg(
				dest,
				min(read_reg(src0), read_reg(src1))
			);
			break;

		case OP_MOV:
			write_reg(
				dest,
				read_reg(src0)
			);
			break;

		case OP_MUL:
			write_reg(
				dest,
				read_reg(src0) * read_reg(src1) / 255.0
			);
			break;

		default:
		case OP_NOP:
			return;
		}
	}
}

#endif

#endif
