#include "uniforms.gli"
#include "math.gli"
#include "clustering.gli"
#include "sg.gli"
#include "textures.gli"

#ifndef LIGHTING_H
#define LIGHTING_H

struct light_result
{
	vec3 diffuse;
	vec3 specular;
};

struct light_input
{
	vec3 pos;
	uint normal;
	uint view;
	uint reflected;
	float roughness;
	float roughness2;
	float normalizationTerm; // roughness * 4.0 + 2.0

	float a2;
	float rcp_a2;
	float spec_c;
	uint tint;
};

float get_spec_c(float rcp_a2)
{
	return 0.72134752 * rcp_a2 + 0.39674113;
}

// https://www.unrealengine.com/en-US/blog/physically-based-shading-on-mobile
vec3 env_brdf_approx( vec3 f0, float roughness, float ndotv )
{
	const vec4 c0 = vec4( -1, -0.0275, -0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, -0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( -9.28 * ndotv ) ) * r.x + r.y;
	vec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;
	return f0 * AB.x + AB.y;
}

float env_brdf_nonmetal( float roughness, float ndotv )
{
	// Same as env_brdf_approx( 0.04, roughness, ndotv )
	const vec2 c0 = vec2( -1, -0.0275 );
	const vec2 c1 = vec2( 1, 0.0425 );
	vec2 r = roughness * c0 + c1;
	return min( r.x * r.x, exp2( -9.28 * ndotv ) ) * r.x + r.y;
}

// https://community.arm.com/cfs-file/__key/communityserver-blogs-components-weblogfiles/00-00-00-20-66/siggraph2015_2D00_mmg_2D00_renaldas_2D00_slides.pdf
vec3 env_brdf_refit(vec3 f0, float roughness, float ndotv)
{
	float r = 1.0 - max(roughness, ndotv);
	float r2 = r * r;
	return r * r2 + f0;
}

vec3 env_brdf( vec3 f0, float roughness, float ndotv )
{
	return env_brdf_refit(f0, roughness, ndotv);

//#ifdef SPECULAR
//	return env_brdf_approx(f0, roughness, ndotv);
//#else
//	return vec3(env_brdf_nonmetal(roughness, ndotv));
//#endif
}

vec3 fresnel_approx(vec3 f0, float costh)
{
	return f0 + (1.0 - f0) * exp2(-8.35 * costh);
}

void calc_point_light(inout light_result result, uint light_index, light_input params)
{
	vec3 lvec = lights[light_index].position.xyz - params.pos.xyz;
	
	float len = dot(lvec, lvec);
	if (len > lights[light_index].radiusSq)
		return;

	len = sqrt(len);
	vec3 lvec_un = lvec;
	float rcpLen = len > 0.0 ? 1.0 / len : 0.0;
	lvec *= rcpLen;

	float intensity = lights[light_index].direction_intensity.w;
	//if(lights[light_index].type == 3)
	//{
	//	float angle = dot(lights[light_index].direction_intensity.xyz, lvec);
	//	if (angle <= lights[light_index].cosAngleY)
	//		continue;
	//
	//	if (angle < lights[light_index].cosAngleX)
    //        intensity = (1.0 - (lights[light_index].cosAngleX - angle) * lights[light_index].lux) * intensity;
	//}

	// this is JK's dynamic light attenuation model
	// note it depends on scalar value matching whatever was used to calculate the intensity, it seems
	if (lights[light_index].type > 0)
	{
		const float scalar = 0.4; // todo: needs to come from rdCamera_pCurCamera->attenuationMin
		intensity -= scalar * len;
	}
	else // jed attenuation for static lights
	{
		float range = (lights[light_index].falloffMin - len) / lights[light_index].falloffMin;
		//range *= range; // squared
		intensity *= range * range; // gamma 2.0 compensation
	}

	if (intensity <= 0.0)
		return;

	vec3 normal = decode_octahedron_uint(params.normal);
	float lightMagnitude = dot(normal.xyz, lvec);
	float signedMagnitude = lightMagnitude;
	lightMagnitude = max(lightMagnitude, 0.0) * intensity;

	vec3 cd = vec3(lightMagnitude);
	if (lightMode == 5)
	{
		// https://www.shadertoy.com/view/dltGWl
		// exp -> exp2, 3.0 * 1.4427 = 4.3281
		vec3 sss = exp2((-4.3281 * abs(signedMagnitude)) / (fillColor.rgb + 0.001));
		cd.xyz += fillColor.rgb * sss * (0.2 * intensity);
	}
	else if(signedMagnitude <= 0.0)
	{
		return;
	}

	vec3 lightColor = (unpack_argb2101010(lights[light_index].color).xyz / 1023.0);
	if (lights[light_index].type > 0)
	{
		result.diffuse = cd.rgb * lightColor.rgb + result.diffuse;
	}
	else
	{
		lightColor *= unpack_argb8888(params.tint).rgb / 255.0;
	}

//#ifdef SPECULAR				
	// "Physically Based Shading on Mobile"
	// https://www.unrealengine.com/en-US/blog/physically-based-shading-on-mobile
	// approximated energy conserving phong lobe, fresnel and spec color must be applied at the end with env_brdf
	float rdotv = dot(decode_octahedron_uint(params.reflected), lvec);
	float d = params.rcp_a2 * exp2( params.spec_c * rdotv + (-params.spec_c) );
	//float d = exp2( params.spec_c * rdotv + (-params.spec_c) );

	// Unity "Optimizing PBR"
	// https://community.arm.com/cfs-file/__key/communityserver-blogs-components-weblogfiles/00-00-00-20-66/siggraph2015_2D00_mmg_2D00_renaldas_2D00_slides.pdf
	// approximated microfacet GGX lobe, fresnel approximated with 1/ldoth, spec color applied at the end
	//vec3 view = decode_octahedron_uint(params.view);
	//vec3 h = normalize(lvec + view);
	//float ndoth = clamp(dot(h, normal), 0.0, 1.0);
	//float ldoth = clamp(dot(h, lvec), 0.0, 1.0);
	//
	//float d = (ndoth * ndoth) * (params.roughness2 - 1.0) + 1.00001;
	//d = params.roughness2 / ((d * d) * max(0.1, ldoth * ldoth) * params.normalizationTerm);

	result.specular = lightColor.rgb * vec3(lightMagnitude * d) + result.specular;
//#endif
}


// todo: split the spotlights out
void CalculatePointLighting(
	uint bucket_index,
	int lightMode,
	vec3 position,
	vec3 normal,
	vec3 view,
	mat3 tbn,
	vec2 uv,
	vec4 shadows,
	vec3 albedo,
	vec3 f0,
	float roughness,
	inout vec3 diffuseLight,
	inout vec3 specularLight
)
{	
	// precompute some terms
	float a = roughness;// * roughness;
	float a2 = a;// * a;
	float rcp_a2 = 1.0 / a2;
	float aperture = max(sqrt(1.0 - shadows.w), 0.01);
	vec3 reflVec = reflect(-view, normal);

	float scalar = 0.4; // todo: needs to come from rdCamera_pCurCamera->attenuationMin
	vec3 sssRadius = fillColor.rgb;

	float overdraw = 0.0;

	uint first_item = firstLight;
	uint last_item = first_item + numLights - 1u;
	uint first_bucket = first_item / 32u;
	uint last_bucket = min(last_item / 32u, max(0u, CLUSTER_BUCKETS_PER_CLUSTER - 1u));
	for (uint bucket = first_bucket; bucket <= last_bucket; ++bucket)
	{
		uint bucket_bits = uint(texelFetch(clusterBuffer, int(bucket_index + bucket)).x);
		while(bucket_bits != 0u)
		{
			uint bucket_bit_index = uint(findLSB(bucket_bits));
			uint light_index = bucket * 32u + bucket_bit_index;
			bucket_bits ^= (1u << bucket_bit_index);
				
		#ifdef SPECULAR
			if (light_index >= first_item && light_index <= last_item)
		#else
			if (light_index >= first_item && light_index <= last_item)// && any(lessThan(diffuseLight, vec3(1.0))))
		#endif
			{
				overdraw += 1.0;

				light l = lights[light_index];
				vec3 diff = l.position.xyz - position.xyz;

				float len;

				// diffuse uses dist to plane
				//if (lightMode == 2)
				//	len = dot(l.position.xyz - position.xyz, normal.xyz);
				//else
					len = length(diff);

				if ( len >= l.falloffMin )
					continue;

				float rcpLen = len > 1e-6 ? 1.0 / len : 0.0;
				diff *= rcpLen;

				float intensity = l.direction_intensity.w;
				if(l.type == 3)
				{
					float angle = dot(l.direction_intensity.xyz, diff);
					if (angle <= l.cosAngleY)
						continue;

					if (angle < l.cosAngleX)
                        intensity = (1.0 - (l.cosAngleX - angle) * l.lux) * intensity;
				}

				// this is JK's attenuation model, note it depends on scalar value matching whatever was used to calculate the intensity, it seems
				intensity = max(0.0, intensity - len * scalar);

				//if ((aoFlags & 0x1) == 0x1 && numOccluders > 0u)
				{
					//float localShadow = clamp(dot(shadows.xyz, diff.xyz) / (aperture * 0.3 + 0.7), 0.0, 1.0);
					//intensity *= localShadow;// * localShadow;
				}

				if (intensity <= 0.0)
					continue;
				
				float lightMagnitude = dot(normal, diff);
				float signedMagnitude = lightMagnitude;
				lightMagnitude = max(lightMagnitude, 0.0);

				vec3 cd = vec3(lightMagnitude);
				if (lightMode == 5)
				{
					// https://www.shadertoy.com/view/dltGWl
					vec3 sss = 0.2 * exp(-3.0 * abs(signedMagnitude) / (sssRadius.xyz + 0.001));
					cd.xyz += sssRadius.xyz * sss;
				}
				else if(signedMagnitude <= 0.0)
				{
					continue;
				}
#ifdef FRAGMENT_SHADER
				//// pom shadow
				//if(displacement_factor != 0.0)
				//{
				//	vec3 lightT = transpose(tbn) * diff.xyz;
				//	vec2 lightDelta = -lightT.xy * displacement_factor;
      			//
				//	float h0 = 1.0-textureLod(displacement_map, uv.xy, 0.0).r;
				//	float h = h0;    
				//	h = max(0, 1.0-textureLod(displacement_map, uv.xy + 1.000 * lightDelta, 0.0).r); 
				//	h = max(h, 1.0-textureLod(displacement_map, uv.xy + 0.875 * lightDelta, 0.0).r); 
				//	h = max(h, 1.0-textureLod(displacement_map, uv.xy + 0.750 * lightDelta, 0.0).r);
				//	h = max(h, 1.0-textureLod(displacement_map, uv.xy + 0.625 * lightDelta, 0.0).r);
				//	h = max(h, 1.0-textureLod(displacement_map, uv.xy + 0.500 * lightDelta, 0.0).r);
				//	h = max(h, 1.0-textureLod(displacement_map, uv.xy + 0.375 * lightDelta, 0.0).r);
				//	h = max(h, 1.0-textureLod(displacement_map, uv.xy + 0.250 * lightDelta, 0.0).r);
				//	h = max(h, 1.0-textureLod(displacement_map, uv.xy + 0.125 * lightDelta, 0.0).r);
        		//
				//	float shadow = 1.0 - clamp((h - h0) * 3.0, 0.0, 1.0);
				//	intensity *= shadow;
				//}
#endif

				diffuseLight += unpack_argb2101010(l.color).xyz * cd * intensity;

			#ifdef SPECULAR
				//vec3 h = normalize(diff + view);
				vec3 f = f0;// + (1.0 - f0) * exp2(-8.35 * max(0.0, dot(diff, h)));
				//f *= clamp(dot(f0, vec3(333.0)), 0.0, 1.0); // fade out when spec is less than 0.1% albedo
					
				float c = 0.72134752 * rcp_a2 + 0.39674113;
				float d = exp2( c * dot(reflVec, diff) - c ) * (rcp_a2 / 3.141592);

				vec3 cs = f * (lightMagnitude * d);

				specularLight += unpack_argb2101010(l.color).xyz * cs * intensity;
			#endif
			}
			else if (light_index > last_item)
			{
				bucket = CLUSTER_BUCKETS_PER_CLUSTER;
				break;
			}
		}
	}

	//diffuseLight.rgb = temperature(overdraw * 0.125);
}


#endif
