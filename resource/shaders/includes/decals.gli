// decal functionality

#include "math.gli"
#include "uniforms.gli"
#include "textures.gli"
#include "reg.gli"

#ifndef DECALS_H
#define DECALS_H

uniform sampler2D decalAtlas;

vec3 blackbody(float t)
{
	t *= 3000.0;

    float u = ( 0.860117757 + 1.54118254e-4 * t + 1.28641212e-7 * t*t ) 
            / ( 1.0 + 8.42420235e-4 * t + 7.08145163e-7 * t*t );
    
    float v = ( 0.317398726 + 4.22806245e-5 * t + 4.20481691e-8 * t*t ) 
            / ( 1.0 - 2.89741816e-5 * t + 1.61456053e-7 * t*t );

    float x = 3.0*u / (2.0*u - 8.0*v + 4.0);
    float y = 2.0*v / (2.0*u - 8.0*v + 4.0);
    float z = 1.0 - x - y;
    
    float Y = 1.0;
    float X = Y / y * x;
    float Z = Y / y * z;

    mat3 XYZtoRGB = mat3(3.2404542, -1.5371385, -0.4985314,
                        -0.9692660,  1.8760108,  0.0415560,
                         0.0556434, -0.2040259,  1.0572252);

    return rgb2srgb(max(vec3(0.0), (vec3(X,Y,Z) * XYZtoRGB) * pow(t * 0.0004, 4.0)));
}

void calc_decal(inout uint r0, inout uint r1, uint decal_index, vec3 viewPos)
{
	decal dec = decals[decal_index];

	vec3 objectPosition = vec3(transform44(dec.invDecalMatrix, viewPos.xyz));				
	vec3 falloff        = (0.5) - abs(objectPosition.xyz);
	if( any(lessThanEqual(falloff, vec3(0.0))) )
		return;
				
	vec2 decalTexCoord = objectPosition.xz + (0.5);
	decalTexCoord         = decalTexCoord.xy * dec.uvScaleBias.zw + dec.uvScaleBias.xy;
				
	vec4 decalColor = vec4(textureLod(decalAtlas, decalTexCoord, 0));
	if((dec.flags & 0x8u) == 0x8u) // rgb as alpha
		decalColor.a = max(decalColor.r, max(decalColor.g, decalColor.b));

	if(decalColor.a < (0.001))
		return;
				
	decalColor.rgb *= vec3(dec.color.rgb);
				
	if((dec.flags & 0x2u) == 0x2u) // heat
	{
		decalColor.rgb = (4.0) * vec3(textureLod(blackbodyTex, decalColor.r, 0.0).rgb);
		//decalColor.rgb = blackbody(decalColor.r);
						
		vec4 glow = unpackRegister(r1);
		glow.rgb  = decalColor.rgb * (255.0) + glow.rgb;
		r1        = packRegister(glow);
	}
			
	// attenuate when facing away from the decal direction
	float edgeFactor = sat1(abs(objectPosition.z));
	edgeFactor      *= edgeFactor;
	edgeFactor      *= edgeFactor;
	edgeFactor      *= edgeFactor;
	edgeFactor       = (1.0) - edgeFactor;

	vec4 color = unpackRegister(r0);

	if((dec.flags & 0x4u) == 0x4u) // additive
	{
		color.rgb = edgeFactor * decalColor.rgb + color.rgb;
	}
	else
	{
		color.rgb = mix(color.rgb, decalColor.rgb, decalColor.w * edgeFactor);

		//color.rgb = color.rgb * (1.0 - decalColor.w) + decalColor.rgb * decalColor.w;
		//color.w *= 1.0 - decalColor.w;
	}

	r0 = packRegister(color);
}


#endif
